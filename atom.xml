<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yihangliak.github.io</id>
    <title>一杭的博客</title>
    <updated>2019-09-27T03:21:40.070Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yihangliak.github.io"/>
    <link rel="self" href="https://yihangliak.github.io/atom.xml"/>
    <subtitle>你好  靓仔   :D</subtitle>
    <logo>https://yihangliak.github.io/images/avatar.png</logo>
    <icon>https://yihangliak.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 一杭的博客</rights>
    <entry>
        <title type="html"><![CDATA[HTTPRunner]]></title>
        <id>https://yihangliak.github.io/post/F__PjWJCK</id>
        <link href="https://yihangliak.github.io/post/F__PjWJCK">
        </link>
        <updated>2019-09-27T01:35:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>HttpRunner 是一款面向 HTTP(S) 协议的通用测试框架，只需编写维护一份 YAML/JSON 脚本，即可实现自动化测试。</p>
<p><strong>优势</strong></p>
<ul>
<li>继承 Requests 的全部特性，轻松实现 HTTP(S) 的各种测试需求</li>
<li>采用 YAML/JSON 的形式描述测试场景，保障测试用例描述的统一性和可维护性</li>
<li>借助辅助函数（debugtalk.py），在测试脚本中轻松实现复杂的动态计算逻辑</li>
<li>支持完善的测试用例分层机制，充分实现测试用例的复用</li>
<li>测试前后支持完善的 hook 机制</li>
<li>响应结果支持丰富的校验机制</li>
<li>基于 HAR 实现接口录制和用例生成功能（har2case）</li>
<li>结合 Locust 框架，无需额外的工作即可实现分布式性能测试</li>
<li>执行方式采用 CLI 调用，可与 Jenkins 等持续集成工具完美结合</li>
<li>测试结果统计报告简洁清晰，附带详尽统计信息和日志记录</li>
<li>极强的可扩展性，轻松实现二次开发和 Web 平台化</li>
</ul>
<h1 id="环境准备">环境准备</h1>
<p><strong>HttpRunner</strong>目前有2个版本，1.x和2x版本</p>
<p>详见仓库：<a href="https://github.com/HttpRunner/HttpRunner">https://github.com/HttpRunner/HttpRunner</a></p>
<p><strong>使用pip安装：</strong></p>
<pre><code>pip install httprunner
</code></pre>
<p><strong>验证版本</strong></p>
<pre><code>hrun -V
</code></pre>
<h1 id="登录案例">登录案例</h1>
<p><strong>接口文档如下</strong></p>
<figure data-type="image" tabindex="1"><img src="https://ae01.alicdn.com/kf/H9faba9dad2a2470ba59e4e11eac4074aS.jpg" alt=""></figure>
<p><strong>yml格式脚本如下</strong></p>
<pre><code class="language-yml">- config:                          # 全局配置项，作用域为整个测试用例文件
    name: logincase                # 测试用例名
    variables: {}
- test:                            # 测试步骤（可以有多个）
    name: login case1
    request:
        url: http://appapi.fecshop.com/v1/account/login
        method: POST
        headers:
            Content-Type: application/json
            User-Agent: python-requests/2.18.4
        json:
            username: admin
            password: admin123
    validate:                      # 断言
        - eq: [status_code, 200]
        - eq: [content.status, success]
        - eq: [content.code, 200]

</code></pre>
<p><strong>命令行中执行该脚本</strong></p>
<pre><code>hrun fecshop01_login.yml
</code></pre>
<p><strong>查看报告</strong><br>
<img src="https://ae01.alicdn.com/kf/H6ab4d4a855e54c0ea5d012468829066er.jpg" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTML基础]]></title>
        <id>https://yihangliak.github.io/post/dYxAqQpcF</id>
        <link href="https://yihangliak.github.io/post/dYxAqQpcF">
        </link>
        <updated>2019-09-20T09:18:38.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-什么是html">1. 什么是HTML</h2>
<p>HTML是用来描述网页的一种语言，英文全称是：<code>Hyper Text markup language</code></p>
<blockquote>
<p>注意：HTML不是编程语言，是一种标记语言</p>
</blockquote>
<p>HTML使用标记标签来描述网页，然后通过浏览器读取 HTML 文档，并以网页的形式显示出它们</p>
<h2 id="2-html标签">2. HTML标签</h2>
<p>HTML标签是由尖括号包围的关键词，比如<code>&lt;html&gt;</code></p>
<p>HTML标签一般都是成对出现的，比如<code>&lt;html&gt; &lt;/html&gt;</code></p>
<p>标签对中的第一个标签是<code>开始标签</code>，第二个标签是<code>结束标签</code></p>
<h2 id="3-html文件编辑以及文件格式">3. HTML文件编辑以及文件格式</h2>
<p>编辑HTML文件，可以使用<code>Notepad++</code></p>
<p>HTML文件的格式为：<code>htm 或 html</code>，两者没有任何差别，根据自己喜好选择即可</p>
<p>HTML文件保存好以后，可以通过浏览器<code>（chrome/IE/FireFox...）</code>打开进行浏览</p>
<h2 id="4-注释">4. 注释</h2>
<p>html文档代码中可以插入注释，注释是对代码的说明和解释，注释的内容不会显示在页面上，html代码中插入注释的方法是：</p>
<pre><code>&lt;!-- 这是一段注释  --&gt;
</code></pre>
<h2 id="5-html常用标签">5. HTML常用标签</h2>
<h3 id="51标题">5.1标题</h3>
<p>HTML标题通过<code>&lt;h1&gt;-&lt;h6&gt;</code>标签进行定义的，其中<code>&lt;h1&gt;</code>为最大级别标题，<code>&lt;h6&gt;为最小级别标题</code></p>
<p>搜索引擎会爬取标题标签编制索引，所以标题标签很重要</p>
<blockquote>
<p>代码</p>
</blockquote>
<pre><code class="language-html">&lt;h1&gt;This is heading 1&lt;/h1&gt;
&lt;h2&gt;This is heading 2&lt;/h2&gt;
&lt;h3&gt;This is heading 3&lt;/h3&gt;
&lt;h4&gt;This is heading 4&lt;/h4&gt;
&lt;h5&gt;This is heading 5&lt;/h5&gt;
&lt;h6&gt;This is heading 6&lt;/h6&gt;
</code></pre>
<blockquote>
<p>效果图</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://www.z4a.net/images/2019/08/21/Snipaste_2019-08-21_11-04-51.png" alt="Snipaste_2019-08-21_11-04-51.png"></figure>
<h3 id="52段落">5.2段落</h3>
<p>HTML 段落是通过 <code>&lt;p&gt;</code> 标签进行定义的</p>
<blockquote>
<p>代码</p>
</blockquote>
<pre><code class="language-html">&lt;p&gt;这是段落。&lt;/p&gt;
&lt;p&gt;这是段落。&lt;/p&gt;
&lt;p&gt;这是段落。&lt;/p&gt;
</code></pre>
<blockquote>
<p>效果图</p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://www.z4a.net/images/2019/08/21/Snipaste_2019-08-21_11-11-07.png" alt="Snipaste_2019-08-21_11-11-07.png"></figure>
<p><strong>换行</strong></p>
<p>换行标签是单个出现的</p>
<pre><code>不规范写法：&lt;br&gt;
规范写法：&lt;br /&gt;
</code></pre>
<p><strong>字符实体</strong></p>
<blockquote>
<p>有的时候需要在段落中插入一些空格，但是直接在代码中写入空格的话是无法被正常渲染成空格的，需要使用字符实体</p>
</blockquote>
<pre><code>&lt;!--  在段落前想缩进两个文字的空格，使用空格的字符实体：&amp;nbsp;   --&gt;
&lt;p&gt;
&amp;nbsp;&amp;nbsp;一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用&lt;br /&gt;
文本的方式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件&lt;br /&gt;
渲染成网页，显示的网页可以从一个网页链接跳转到另外一个网页。&lt;/p&gt;
</code></pre>
<p>注意：如果只是加入少量空格，是可以用 <strong>字符实体</strong> ，但如果需要大量插入空格，推荐使用样式去控制</p>
<h3 id="53链接">5.3链接</h3>
<p>HTML 链接是通过<code>&lt;a&gt;</code>标签进行定义的</p>
<blockquote>
<p>代码</p>
</blockquote>
<pre><code class="language-html">&lt;a href=&quot;http://www.w3school.com.cn&quot;&gt;This is a link&lt;/a&gt;
</code></pre>
<blockquote>
<p>效果图</p>
</blockquote>
<figure data-type="image" tabindex="3"><a href="https://www.z4a.net/image/Ucix29"><img src="https://www.z4a.net/images/2019/08/21/Snipaste_2019-08-21_11-17-07.png" alt=""></a></figure>
<h3 id="54-块标签">5.4 块标签</h3>
<p><code>div</code>标签，表示一块内容，没有具体语义</p>
<p><code>p</code>标签与<code>div</code>的区别：</p>
<ul>
<li><code>p</code>带有空行等样式</li>
<li><code>div</code>标签不带任何样式</li>
<li><code>div</code>一般里面是可以嵌套的，比如嵌套<code>h，p</code>标签等</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python全栈（三）：多态]]></title>
        <id>https://yihangliak.github.io/post/phI3IExH8</id>
        <link href="https://yihangliak.github.io/post/phI3IExH8">
        </link>
        <updated>2019-09-13T15:44:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="面向对象三大特性">面向对象三大特性</h3>
<ol>
<li><strong>封装</strong> ： 根据职责将属性与方法封装到一个抽象的类中
<ul>
<li>定义类的准则</li>
</ul>
</li>
<li><strong>继承</strong> ： 实现代码的重用，相同的代码不需要重复的编写
<ul>
<li>设计类的技巧</li>
<li>子类针对自己特有的需求，编写特定的代码</li>
</ul>
</li>
<li><strong>多态</strong> ： 不同的子类对象调用相同的父类方法，产生不同的执行结果
<ul>
<li>多态可以增加代码的灵活度</li>
<li>多态以继承和重写父类方法为前提</li>
<li>多态不会影响到类的内部设计</li>
</ul>
</li>
</ol>
<blockquote>
<p>实例代码结构图示</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://ae01.alicdn.com/kf/H0b8155e7965844d0a5903c42093acf00R.png" alt=""></figure>
<blockquote>
<p>代码</p>
</blockquote>
<pre><code class="language-python">class Dog(object):

    def __init__(self, name):
        self.name = name

    def game(self):
        print('%s正在玩耍... ...' %self.name)


class XiaoTianQuan(Dog):

    def game(self):
        print('%s正在天上玩耍... ...' %self.name)


class Person(object):

    def __init__(self, name):
        self.name = name

    def game_with_dog(self, dog):  # 将狗对象传入
        print(&quot;%s和%s正在玩耍&quot; %(self.name, dog.name))
        dog.game()  # 调用狗对象中的game方法


# xiaohei = Dog(&quot;小黑&quot;)    # 创建一条狗
xiaohei = XiaoTianQuan(&quot;哮天犬&quot;)  # 小黑传入game with dog只是普通玩耍，哮天犬传入以后再天上玩耍

xiaoming = Person(&quot;小明&quot;)  # 创建一个人
xiaoming.game_with_dog(xiaohei)  # 调用人类中的与狗玩耍方法，并将xiaohei传入
# 不同的子类对象，调用相同的父类对象，产生不同的结果，这就是多态
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python全栈（二）：私有属性与私有方法]]></title>
        <id>https://yihangliak.github.io/post/dz4T-djIi</id>
        <link href="https://yihangliak.github.io/post/dz4T-djIi">
        </link>
        <updated>2019-09-11T03:51:37.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>基本介绍</p>
</blockquote>
<ul>
<li><strong>私有属性</strong> 就是 <strong>对象</strong> 不希望公开的属性</li>
<li><strong>私有方法</strong> 就是 <strong>对象</strong> 不希望公开的方法</li>
</ul>
<blockquote>
<p>定义方式</p>
</blockquote>
<p>在定义属性或者方法时，在属性或者方法名前增加 <strong>两个下划线</strong> ，这就是定义私有属性或者私有方法</p>
<blockquote>
<p>提示</p>
</blockquote>
<ul>
<li>私有属性或者私有方法，在类外无法访问，但是在类中是可以访问的</li>
</ul>
<blockquote>
<p>代码示例</p>
</blockquote>
<p><strong>私有方法</strong></p>
<pre><code class="language-python">class Test():
    def test1(self):
        print('普通方法')
        self.__test3()     # 私有方法可以在类内部被调用

    def _test2(self):
        print('普通方法')

    def __test3(self):      # 双斜线开头则为私有方法
        print('私有方法')

t = Test()
t.test1()
t._test2()
# t.__test3()        # 私有方法在外部不能被调用
</code></pre>
<p><strong>私有属性</strong></p>
<pre><code class="language-python">class Person():
    def __init__(self, name):
        self.__name = name   # 双下划线+属性名=私有属性
        self.sex = 'boy'

    def get_name(self):
        return self.__name

    def set_name(self, new_name):   # 定义一个修改name属性的方法，一旦name长度小于5则报错
        if len(new_name)&gt;=5:
            self.__name = new_name   # 私有属性在类中是可以访问的
        else:
            print('error:名字长度需要大于或者等于5')


p = Person('zs')
print(p.sex)           # 普通属性在类外是可以访问到的
# print(p.__name)      # 私有属性在类外不能访问
p.set_name('hiiii')    # 调用修改name属性的方法
print(p.get_name())    # 访问被修改之后的name属性
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python全栈（一）：子类扩展父类方法]]></title>
        <id>https://yihangliak.github.io/post/QpPt8XA7M</id>
        <link href="https://yihangliak.github.io/post/QpPt8XA7M">
        </link>
        <updated>2019-09-10T15:54:29.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>基本介绍</p>
</blockquote>
<p>如果在开发中，<strong>子类方法的实现中包含父类方法的实现</strong>，即<strong>父类封装的方法是子类实现的一部分</strong></p>
<p>则可以使用 <strong>扩展</strong>的方式</p>
<blockquote>
<p>使用步骤：</p>
</blockquote>
<ol>
<li>在子类中 <strong>重写</strong> 父类方法</li>
<li>在需要的位置使用<code>super().父类方法</code>来调用父类方法的执行</li>
<li>代码其他位置针对子类的需求，编写 <strong>子类特有的代码实现</strong></li>
</ol>
<blockquote>
<p>关于super</p>
</blockquote>
<ul>
<li>在python中，super是一个 <strong>特殊</strong> 的类</li>
<li>super（）就是使用super类创建出来的对象</li>
<li>最常使用的场景就是在 <strong>重写父类方法时</strong>，调用 <strong>在父类中的方法实现</strong></li>
</ul>
<blockquote>
<p>代码实现</p>
</blockquote>
<pre><code class="language-python"># 定义父类：动物类
class Animal():
    def eat(self):
        print('吃')

    def run(self):
        print('跑')

    def bark(self):
        print('狗吠')

xiaohei = Animal()  # 实例化狗类
xiaohei.eat()       # 生成对象调用父类方法

print('='*50)

class Dog(Animal):   # 定义狗类，并继承动物类
    def bark(self):
        print('汪汪叫')

xiaobai = Dog()
xiaobai.bark()       # 调用狗吠方法

print('='*50)

class xiaotianquan(Dog):   # 定义哮天犬类继承狗类
    def bark(self):
        super().bark()  # 使用super().父类方法调用父类方法并执行
        print('eqweqdasdasdasdsad')  # 编写子类特有的功能，哮天犬除了狗吠还会鸟语...

xtq = xiaotianquan()
xtq.bark()  # 哮天犬除了不仅会狗吠，还会说鸟语...
</code></pre>
<pre><code>吃
==================================================
汪汪叫
==================================================
汪汪叫
eqweqdasdasdasdsad
</code></pre>
<blockquote>
<p>提示</p>
</blockquote>
<p>在Python2.x时，如果需要调用父类方法，还可以使用以下方式实现：</p>
<pre><code>父类名.方法（self）
</code></pre>
<ul>
<li>这种方式，在目前的Python3.x中依旧支持</li>
<li>但是不推荐使用这种方法，因为一旦父类名发生变化，子类中涉及到父类 <strong>类名</strong> 的位置同样需要修改</li>
</ul>
<blockquote>
<p>注意</p>
</blockquote>
<ul>
<li>在开发时，父类名和super（）两种方式不要混用</li>
<li>如果使用当前子类名调用方法，会形成递归调用，<strong>出现死循环</strong></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[实用工具大搜罗]]></title>
        <id>https://yihangliak.github.io/post/UQ96yPt5M</id>
        <link href="https://yihangliak.github.io/post/UQ96yPt5M">
        </link>
        <updated>2019-09-10T06:30:01.000Z</updated>
        <summary type="html"><![CDATA[<p>盘点那些不为人知的工具-们！</p>
]]></summary>
        <content type="html"><![CDATA[<p>盘点那些不为人知的工具-们！</p>
 <!-- more -->
<h1 id="文字编辑">文字编辑    📕</h1>
<p><strong>思维导图</strong></p>
<ul>
<li>幕布：<a href="https://mubu.com/">https://mubu.com</a></li>
<li>xmind<br>
xmind ZEN：<a href="http://dl2.xmind.cn/XMind-ZEN-Update-2019-for-Windows-64bit-9.2.0-201904271935.exe">http://dl2.xmind.cn/XMind-ZEN-Update-2019-for-Windows-64bit-9.2.0-201904271935.exe</a><br>
破解补丁：<a href="https://carrot.ctfile.com/dir/11269771-31680249-fdf2c2/">https://carrot.ctfile.com/dir/11269771-31680249-fdf2c2/</a></li>
</ul>
<p><strong>Markdown编辑器</strong></p>
<ul>
<li>Typora：<a href="https://www.typora.io/">https://www.typora.io/</a></li>
</ul>
<p><strong>万能编辑器</strong></p>
<ul>
<li>notepad ++</li>
</ul>
<p><strong>文档，表格，幻灯片</strong></p>
<ul>
<li>WPS（政企专版，无广告）：<a href="http://wpspro.support.wps.cn/gov/heilongjiang/daqing/installation/WPS_Office_2019_%E5%A4%A7%E5%BA%86%E5%B8%82%E5%85%9A%E6%94%BF%E6%9C%BA%E5%85%B3%E4%B8%93%E7%94%A8%E7%89%88.exe">http://wpspro.support.wps.cn/gov/heilongjiang/daqing/installation/WPS_Office_2019_大庆市党政机关专用版.exe</a></li>
<li>在线emoji：<a href="http://emojihomepage.com/">http://emojihomepage.com/</a></li>
</ul>
<h1 id="开发工具">开发工具    💻</h1>
<p><strong>图形化Git工具</strong></p>
<ul>
<li>sourcetree：<a href="https://www.sourcetreeapp.com/">https://www.sourcetreeapp.com/</a></li>
</ul>
<p><strong>python编辑器</strong></p>
<ul>
<li>pycharm：<a href="http://www.jetbrains.com/pycharm/">http://www.jetbrains.com/pycharm/</a></li>
</ul>
<p><strong>MySQL连接软件</strong></p>
<ul>
<li>Navicat for mysql 绿色版：<a href="https://www.cr173.com/soft/38153.html">https://www.cr173.com/soft/38153.html</a></li>
</ul>
<p><strong>Java8</strong></p>
<ul>
<li>JDK下载地址：<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></li>
</ul>
<p><strong>淘宝镜像站</strong></p>
<ul>
<li>地址：<a href="https://npm.taobao.com">https://npm.taobao.com</a></li>
</ul>
<h1 id="生活类">生活类    👀</h1>
<p><strong>护眼</strong></p>
<ul>
<li>护眼宝：<a href="http://www.huyanapp.com/portal.php">http://www.huyanapp.com/portal.php</a></li>
</ul>
<h1 id="图片处理类">图片处理类    🎨</h1>
<p><strong>截图工具</strong></p>
<ul>
<li>Snipaste：<a href="https://www.snipaste.com/">https://www.snipaste.com/</a></li>
</ul>
<p><strong>免费图床</strong></p>
<ul>
<li>smpic：<a href="https://github.com/kookob/smpic">https://github.com/kookob/smpic</a></li>
<li>聚合图床：<a href="https://www.superbed.cn/">https://www.superbed.cn/</a></li>
<li>智图图片压缩：<a href="https://zhitu.isux.us/">https://zhitu.isux.us/</a></li>
</ul>
<h1 id="系统美化类">系统美化类    🐼</h1>
<p><strong>任务栏全透明</strong></p>
<ul>
<li>TranslucentTB：<a href="https://translucenttb.en.softonic.com/">https://translucenttb.en.softonic.com/</a></li>
</ul>
<p><strong>Windows字体优化</strong></p>
<ul>
<li>Mactype：<a href="https://www.mactype.net/">https://www.mactype.net/</a></li>
</ul>
<p><strong>超美壁纸</strong></p>
<ul>
<li>Pexels：<a href="https://www.pexels.com/">https://www.pexels.com/</a></li>
</ul>
<h1 id="效率类">效率类     📚</h1>
<p><strong>待办事项管理</strong></p>
<ul>
<li>MicrosoftToDo：<a href="https://todo.microsoft.com/">https://todo.microsoft.com/</a></li>
</ul>
<p><strong>本地文件搜索工具（一秒找到文件）</strong></p>
<ul>
<li>everything：<a href="https://www.voidtools.com/zh-cn/">https://www.voidtools.com/zh-cn/</a></li>
</ul>
<p><strong>百度云不限速下载</strong></p>
<ul>
<li>speedpan：<a href="https://www.speedpan.com/">https://www.speedpan.com/</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dcoker 安装MySQL]]></title>
        <id>https://yihangliak.github.io/post/SuD1zwuyw</id>
        <link href="https://yihangliak.github.io/post/SuD1zwuyw">
        </link>
        <updated>2019-08-30T08:40:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="dcoker-安装mysql">Dcoker 安装MySQL</h1>
<h2 id="前言">前言</h2>
<blockquote>
<p>什么是Docker？</p>
</blockquote>
<p>Docker是一个开源的应用容器引擎，可以将应用程序打包成镜像，然后发布到任何的Linux机器上，也可以实现虚拟化</p>
<p>简单来说，Docker就好比是虚拟机，虚拟机可以模拟出电脑硬件，并且可以很方便的克隆，但是虚拟机的缺点也非常明显，它会占用宿主机非常多的硬件资源，而且启动速度也非常慢。而Linux在此基础之上发展出了一种新的容器技术，容器与宿主机共用硬件资源，启动速度也非常快，这个容器就是Docker。</p>
<h2 id="1-安装docker">1. 安装Docker</h2>
<p>Docker的安装十分简单，在Linux系统中，使用<code>yum</code>安装即可（需联网）</p>
<pre><code>yum -r install docker
# -r表示后续所有的需要确认的步骤都默认选择“是”
</code></pre>
<h2 id="2启动docker">2.启动Docker</h2>
<pre><code>service docker start
</code></pre>
<h2 id="3镜像-容器-仓库">3.镜像 容器 仓库</h2>
<p>Docker中有仓库，镜像，容器这个三个比较重要的概念。</p>
<ul>
<li>仓库类似代码仓库，集中存放镜像的场所</li>
<li>镜像类似虚拟机的镜像</li>
<li>容器则是从镜像创建的一个运行实例</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://ae01.alicdn.com/kf/H508f8c2700f043c79194c1ef521c17fao.jpg" alt=""></figure>
<h2 id="4拉取镜像">4.拉取镜像</h2>
<p>拉取MySQL镜像，版本选择5.7</p>
<pre><code>docker pull mysql:5.7
</code></pre>
<h2 id="5查看镜像">5.查看镜像</h2>
<p>验证刚刚拉取的镜像是否成功</p>
<pre><code>docker images
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://ae01.alicdn.com/kf/Hb52cbf8cac344605b2c688b9bff42b73t.jpg" alt=""></figure>
<h2 id="6创建mysql目录">6.创建MySQL目录</h2>
<p>创建MySQL的储存目录，用来存放数据库数据</p>
<p><code>mkdir -p</code>可以递归创建目录</p>
<pre><code>mkdir -p /usr/local/mysql/conf /usr/local/mysql/data /usr/local/mysql/logs
</code></pre>
<h2 id="7运行容器">7.运行容器</h2>
<pre><code class="language-shell">docker run -p 3309:3306 --name firstmysql -v /usr/local/mysql/conf:/etc/mysql/conf.d -v /usr/local/mysql/logs:/logs -v /usr/local/mysql/data:/var/lib/mysql -e mysql_root_password=123456 -d mysql:5.7
</code></pre>
<p>命令说明：</p>
<ul>
<li><code>--name</code>：容器命名为firstmysql</li>
<li><code>-p 3309:3306</code>：将容器的3309端口映射到宿主机的3306</li>
<li><code>-v</code>：将容器的某个目录挂载到主机的目录</li>
<li><code>-e mysql_root_password=123456</code>：初始化数据库root用户的密码为123456</li>
<li><code>-d</code>：挂后台运行</li>
</ul>
<h2 id="8查看容器状态">8.查看容器状态</h2>
<p>查看容器状态命令：</p>
<pre><code>docker ps -a
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://ae01.alicdn.com/kf/H30935c3f43784024a3b9d640e6a4baf0w.jpg" alt=""></figure>
<h2 id="9进入容器">9.进入容器</h2>
<pre><code>docker exec -i -t firstmysql bash
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://ae01.alicdn.com/kf/Ha34afe45477240aa8e74e6a1d5eec0fdu.jpg" alt=""></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LuckyFrame自动化测试平台部署指南]]></title>
        <id>https://yihangliak.github.io/post/luckyframe</id>
        <link href="https://yihangliak.github.io/post/luckyframe">
        </link>
        <updated>2019-08-28T02:09:31.000Z</updated>
        <summary type="html"><![CDATA[<p>LuckyFrame测试平台是一款免费开源的测试平台，最大的特点是全纬度覆盖了接口自动化、WEB UI自动化、APP自动化，并且支持分布式测试，测试关键字驱动也很大程度上解决了测试同学代码基础弱的问题。</p>
]]></summary>
        <content type="html"><![CDATA[<p>LuckyFrame测试平台是一款免费开源的测试平台，最大的特点是全纬度覆盖了接口自动化、WEB UI自动化、APP自动化，并且支持分布式测试，测试关键字驱动也很大程度上解决了测试同学代码基础弱的问题。</p>
<!-- more -->
<h1 id="关于luckyframe">关于LuckyFrame</h1>
<p>​	<code>LuckyFrame</code>测试平台是一款免费开源的测试平台，最大的特点是全纬度覆盖了<code>接口自动化</code>、<code>WEB UI自动化</code>、<code>APP自动化</code>，并且支持<code>分布式测试</code>，<code>测试关键字驱动</code>也很大程度上解决了测试同学代码基础弱的问题。同时也集成了<code>质量管理</code>相关的一些功能，解决QA的日常工作中，项目过程数据的收集问题，并能展示一些简单质量报表。</p>
<h1 id="windows平台部署">Windows平台部署</h1>
<h2 id="1-安装jdk">1. 安装JDK</h2>
<ul>
<li>部署LuckyFrame之前，需要先安装jdk，且版本要求在<code>1.8</code>以上</li>
<li>JDK去<code>oracle</code>官网下载即可</li>
<li>打开环境变量配置界面，在用户变量中新增<code>JAVA_HOME=jdk安装路径</code>，再将<code>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</code>添加至系统变量<code>path</code>中即可</li>
<li>在命令行中输入<code>java -version</code>验证</li>
</ul>
<h2 id="2-安装mysql">2. 安装MySQL</h2>
<p>下载xampp集成环境，免去单独配置安装MySQL的麻烦</p>
<ul>
<li>将xampp解压到某磁盘根目录</li>
<li>打开xampp-control程序，启动MySQL</li>
<li>进入xampp中的<code>mysql\bin</code>目录，在当前路径下打开命令行</li>
<li>使用<code>mysql -uroot -p</code>登录（xampp集成的MySQL无密码）</li>
<li>切换到MySQL数据库：<code>use mysql</code></li>
<li>修改MySQL密码：<code>update user set password=password('123456') where user='root'</code></li>
<li>刷新权限：<code>flush privileges</code></li>
</ul>
<h2 id="3-下载luckyframe">3. 下载LuckyFrame</h2>
<p>访问Luckyframe官网，直接下载编译包，下载地址如下：</p>
<pre><code>链接：  https://pan.baidu.com/s/1SNUhzoKFgH2TRQN2Rx711A 密码：u845
</code></pre>
<blockquote>
<p>注意：下载3.0bata版本，同时还要下载数据库初始化sql文件</p>
</blockquote>
<h2 id="4修改编译包数据库配置">4.修改编译包数据库配置</h2>
<ul>
<li>使用压缩工具打开下载好的编译包</li>
<li>找到编译包目录中<code>BOOT-INF\classes\application-druid.yml</code>文件</li>
<li>用notepad打开，将其中的<code>主数据库源</code>配置项中的密码改成本机MySQL的密码</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://ae01.alicdn.com/kf/Heabb9bbbc3f94b159ac29c938f9602741.png" alt=""></figure>
<h2 id="5导入sql文件">5.导入SQL文件</h2>
<p>在启动LuckyFrame之前，需要先在MySQL数据库中导入<code>初始化sql</code>文件</p>
<ul>
<li>登录MySQL，新建<code>luckyframe</code>数据库：<code>create database luckyframe charset=utf8;</code></li>
<li>回到命令行，使用<code>mysql -h localhost -uroot -p luckyframe &lt; V3.sql --default-character-set=utf8</code>将初始化SQL文件导入进数据库，注意要在sql文件所在目录执行该命令</li>
</ul>
<h2 id="6启动luckyframe">6.启动LuckyFrame</h2>
<ul>
<li>
<p>进入LuckyFrame服务端jar包存放目录，在此目录打开命令行</p>
</li>
<li>
<p>命令行输入：<code>java -jar LuckyFrameWeb.jar</code>启动服务即可</p>
</li>
<li>
<p>启动成功后，会看到如下提示</p>
</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://ae01.alicdn.com/kf/H3bb471a358a64da28a46a31a45dd130eN.png" alt=""></figure>
<h2 id="7访问">7.访问</h2>
<ul>
<li>在浏览器中输入<code>本机ip：80</code>即可访问LuckyFrame，默认为80端口，可以省略不写</li>
<li>如要修改端口号，需要在编译包中找到<code>BOOT-INF\classes\application.yml</code>文件，修改默认端口配置</li>
</ul>
<p>访问效果图如下：</p>
<figure data-type="image" tabindex="3"><img src="https://ae01.alicdn.com/kf/H50d41bdd78bd40889b1bfdc4a47e89cdr.png" alt=""></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jemeter性能测试完整入门]]></title>
        <id>https://yihangliak.github.io/post/begin_jemeter</id>
        <link href="https://yihangliak.github.io/post/begin_jemeter">
        </link>
        <updated>2019-07-23T01:18:12.000Z</updated>
        <content type="html"><![CDATA[<h1 id="性能测试笔记">性能测试笔记</h1>
<h1 id="第一章-性能基础知识">第一章 性能基础知识</h1>
<h2 id="1-性能测试的概念">1. 性能测试的概念</h2>
<p>通过性能测试工具模拟多种正常，峰值，以及异常负载条件来对系统的各项性能指标进行测试</p>
<h2 id="2性能测试的目的">2.性能测试的目的</h2>
<ul>
<li>评估系统能力</li>
<li>测试系统可靠性</li>
<li>识别系统的弱点（内存泄漏）</li>
<li>性能调优（满足用户需求，优化瓶颈，提高整体性能）</li>
</ul>
<blockquote>
<p>性能测试时间点，功能测试之后</p>
</blockquote>
<h2 id="3性能测试归属">3.性能测试归属</h2>
<p>测试阶段划分：系统测试</p>
<p>性能测试属于黑盒测试</p>
<p>属于6大质量特性中的：效率特性</p>
<h1 id="第二章-性能测试的分类">第二章 性能测试的分类</h1>
<h2 id="1-负载测试">1 负载测试</h2>
<ul>
<li>通过逐步给服务器增加压力，直到某项数据不达标，测试软件的瓶颈</li>
<li>评测和评估对象在不同工作量条件下的性能行为</li>
<li>负载的目标是确保系统测试超出预期工作量的情况下仍然可以继续运行</li>
</ul>
<h2 id="2-压力测试">2 压力测试</h2>
<ul>
<li>强度测试，通过高负载的手段来使服务器资源处于极限状态，直到某项数据失效，测试系统的极限</li>
<li>通过高负载的手段，可以更快的发现系统内存泄漏以及稳定性等问题</li>
</ul>
<h2 id="3-失效恢复性测试">3 失效恢复性测试</h2>
<ul>
<li>出现问题后能否根据预先制定的策略恢复，且恢复后能正常工作</li>
</ul>
<h2 id="4-并发测试">4 并发测试</h2>
<ul>
<li>测试多用户按照预定的场景请求某个业务或者功能时，是否会出现问题</li>
<li>几乎所有的性能测试都会涉及到并发测试，并发测试的主要目的是找出并发问题（资源争用）</li>
</ul>
<h2 id="5-稳定性测试">5 稳定性测试</h2>
<ul>
<li>一般使用目标负载的1.5-2倍的负载量或者CPU占用达到70%，测试系统长时间运行（7x24），观察系统稳定性</li>
</ul>
<h2 id="6-配置测试">6 配置测试</h2>
<ul>
<li>通过调整系统软件、硬件环境，了解在不同情况下系统性能指标情况，从而找到系统最优配置</li>
</ul>
<blockquote>
<p>新产品上线以前，先做一个配置测试，找到最优配置，然后进行负载，压力，稳定，失效恢复性等测试</p>
<p>产品上线以后主要做压力测试</p>
<p>当然，具体做什么类型的性能测试，需要根据项目背景去灵活选择</p>
</blockquote>
<h1 id="第三章-性能术语">第三章 性能术语</h1>
<h2 id="1-事务">1 事务</h2>
<p>一个任务从开始到结束的过程</p>
<blockquote>
<p>事务具有原子性</p>
<p>原子性：整个程序操作过程中的所有操作，要么全部完成，要么全部不完成</p>
</blockquote>
<h2 id="2-响应时间">2 响应时间</h2>
<p>系统对请求作出响应的时间（一个事务处理完成的时间）</p>
<blockquote>
<p>响应时间=网络传输时间+web服务器处理时间+DB服务器处理时间+浪费时间</p>
<p>258原则：</p>
<p>​	&lt;2秒快<br>
​	大于2小于5秒可以<br>
​	大于5小于8秒勉强接受<br>
​	大于8秒不耐烦了，或者认为系统已经失去响应，而选择离开这个Web站点，或者发起第二次请</p>
</blockquote>
<h2 id="3-吞吐量">3 吞吐量</h2>
<p>每秒服务器处理的请求或者事务数</p>
<p>吞吐量衡量单位：</p>
<ul>
<li>每秒请求数</li>
<li>每秒事务数（TPS）</li>
<li>每秒页面数</li>
<li>每秒查询数（QPS）</li>
</ul>
<h2 id="4-并发">4 并发</h2>
<ul>
<li>绝对并发：不同用户，在同一时刻，做同一个操作</li>
<li>相对并发：不用用户，在同一时刻，做不同操作</li>
</ul>
<h2 id="5-并发数">5 并发数</h2>
<p>同一时间操作的用户个数</p>
<h2 id="6-场景">6 场景</h2>
<p>模拟用户的真实操作过程</p>
<p>分类：</p>
<ul>
<li>单一场景：单个操作</li>
<li>混合场景：多个组合操作</li>
</ul>
<h2 id="7-思考时间">7 思考时间</h2>
<p>用户每个操作之间的间隔时间，增加间隔时间可以更真实地模拟用户使用的场景</p>
<h2 id="8-性能瓶颈">8 性能瓶颈</h2>
<p>软件的性能缺陷</p>
<p>这个缺陷主要分布在：</p>
<ul>
<li>硬件：如cpu等配置过低</li>
<li>应用服务器：如web服务器，数据库系统等</li>
<li>程序：程序设计的问题</li>
<li>操作系统：如Windows虚拟内存交换效果不理想等</li>
<li>网络设备：防火墙，交换机等</li>
</ul>
<h1 id="第四章-性能测试工具">第四章 性能测试工具</h1>
<h2 id="1-工具分类">1 工具分类</h2>
<p><strong>jmeter</strong></p>
<ul>
<li>免费，开源</li>
<li>支持二次开发</li>
<li>支持分布式部署</li>
<li>支持命令行模式</li>
</ul>
<p><strong>LoadRunner</strong></p>
<ul>
<li>商业，收费</li>
</ul>
<p><strong>Locust</strong></p>
<ul>
<li>python开源性能测试工具</li>
</ul>
<p><strong>Apache ab</strong></p>
<ul>
<li>Apache的web性能测试工具</li>
</ul>
<h1 id="第五章-jmeter原理与安装">第五章  Jmeter原理与安装</h1>
<h2 id="1-工作原理">1 工作原理</h2>
<p>使用取样器向服务器发送请求，从服务器获取响应结果，然后通过线程组模拟服务器压力</p>
<h2 id="2-安装">2 安装</h2>
<p>安装JDK并配置环境变量</p>
<p>官网下载jmeter压缩包，并解压</p>
<p>双击bin目录下的jmeter.bat启动即可</p>
<h2 id="3-常用组件">3 常用组件</h2>
<p>Test Plan：测试计划（场景）</p>
<ul>
<li>Thread Group：线程组，模拟并发数
<ul>
<li>http request ：取样器，模拟用户请求
<ul>
<li>view result tree：查看结果树，监听取样器的结果</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://ae01.alicdn.com/kf/H50ba236c8fd54827b2cb8db540b8bff3B.png" alt=""></figure>
<p>在取样器中添加响应断言</p>
<figure data-type="image" tabindex="2"><img src="https://ae01.alicdn.com/kf/Hf48d6854c1504741bf996e26a66c1ea26.png" alt=""></figure>
<p>断言界面详解</p>
<figure data-type="image" tabindex="3"><img src="https://ae01.alicdn.com/kf/H4ffa89ad39cf4c91a5f754de0b3f786f0.png" alt=""></figure>
<p>添加聚合报告</p>
<figure data-type="image" tabindex="4"><img src="https://ae01.alicdn.com/kf/Hed61829eba6f429fb8aa50adcae88ec3G.png" alt=""></figure>
<p>聚合报告详情</p>
<figure data-type="image" tabindex="5"><img src="https://puui.qpic.cn/fans_admin/0/3_1452561028_1568392796619/0" alt=""></figure>
<h2 id="4-第一个脚本">4 第一个脚本</h2>
<p>1.新建测试计划</p>
<p>2.创建线程组</p>
<p>3.添加http取样器</p>
<p>4.添加监听器-view result tree</p>
<p>5.添加断言-response assertion</p>
<p>6.添加聚合报告</p>
<p>ecshop登录脚本</p>
<figure data-type="image" tabindex="6"><img src="https://ae01.alicdn.com/kf/H2330733451dc4f3c8ae6d5ef2acb8d88R.png" alt=""></figure>
<h1 id="第六章-jmeter常用组件">第六章 jmeter常用组件</h1>
<h2 id="1-参数化">1 参数化</h2>
<p>1.设置用户自定义变量</p>
<figure data-type="image" tabindex="7"><img src="https://ae01.alicdn.com/kf/H296e10c5f63d458fbe85e4e1dfab87b5Q.png" alt=""></figure>
<p>调用方式与RF一致，${变量名}</p>
<figure data-type="image" tabindex="8"><img src="https://ae01.alicdn.com/kf/Hcabf2b45b57a4db2af85972e0fdf50ccP.png" alt=""></figure>
<p>添加参数化文件读取组件</p>
<figure data-type="image" tabindex="9"><img src="https://ae01.alicdn.com/kf/Ha84c2299573c432ba776b71f204c9568I.png" alt=""></figure>
<h2 id="2-cookie关联">2 cookie关联</h2>
<p>把上一个取样器的结果关联到一下个取样器</p>
<p>http cookie manager 可以把cookie自动关联到下一个取样器的请求中</p>
<p>在同一个线程组中添加一个 HTTP cookie manager</p>
<figure data-type="image" tabindex="10"><img src="https://ae01.alicdn.com/kf/H079959fdcd494091b3046b85a8ff6b50O.png" alt=""></figure>
<p>添加完成以后无需配置，即可将第一个取样器中的cookie自动同步至所有线程组</p>
<h2 id="3-上传文件">3  上传文件</h2>
<p>以ecshop留言上传文件为例</p>
<p>首先添加一个发表留言并且要上传文件的取样器，并配置好取样器</p>
<figure data-type="image" tabindex="11"><img src="C:%5CUsers%5CAlex%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1568393079080.png" alt=""></figure>
<p>配置文件上传参数</p>
<figure data-type="image" tabindex="12"><img src="https://ae01.alicdn.com/kf/Hbf0a71a4f1074950a64fa947302d01a6b.jpg" alt=""></figure>
<p>运行成功示意图</p>
<h2 id="4-正则提取器">4  正则提取器</h2>
<p>提取取样器结果中的任何内容</p>
<p>通过表达式从一堆数据中提取符合表达式规则的数据</p>
<p>语法：</p>
<pre><code>[0-9]  : 表示任意一个数字，等价于/d
[a-z]  : 表示任意一个小写字母
[A-Z]  : 表示任意一个大写字母
\w     : 表示任意一个字符，包含大小写字母，中文，数字以及一个_
\s     : 表示一个空格
{}     : 表示匹配前面表达式的连续n个
{m,n}  : 表示匹配前面表达式的连续m-n个
+      : 表示匹配前面表达式的一个或多个
\      : 去转义
.      : 表示出了换行符之外的任意一个字符
$      : 结尾
^      : 开头
？     ： 非贪婪匹配，匹配到一个结果后结束匹配
()     : 需要提取的内容用小括号包围

</code></pre>
<p>添加正则提取器</p>
<figure data-type="image" tabindex="13"><img src="https://ae01.alicdn.com/kf/H01a00a5f00c84c9b9bd4f907960c966d8.jpg" alt=""></figure>
<p>配置正则提取器</p>
<figure data-type="image" tabindex="14"><img src="https://ae01.alicdn.com/kf/Heca919a2c0654a31973056072ba8004fq.jpg" alt=""></figure>
<p>在一下个查询订单详情的取样器中使用上述提取出的变量</p>
<figure data-type="image" tabindex="15"><img src="https://ae01.alicdn.com/kf/Hedbe48d95f4c448fb22bfaed563d03d3d.jpg" alt=""></figure>
<h2 id="5-添加debug组件">5  添加debug组件</h2>
<p>该组件可以查看所有使用过的变量</p>
<p>添加debug组件</p>
<figure data-type="image" tabindex="16"><img src="https://ae01.alicdn.com/kf/Ha9dd85c2e22a46edbba0333e5a5beadfn.jpg" alt=""></figure>
<p>为该组件添加一个结果树，即可查看使用过的变量</p>
<h2 id="6-逻辑控制器">6  逻辑控制器</h2>
<p>逻辑控制器，可以控制取样器的执行顺序</p>
<h3 id="61-for">6.1 for</h3>
<p>添加for循环控制器</p>
<figure data-type="image" tabindex="17"><img src="https://ae01.alicdn.com/kf/He2e145376ba44a508d4fd5afaef61f35C.jpg" alt=""></figure>
<p>将查询订单详情挪至for控制器里面</p>
<figure data-type="image" tabindex="18"><img src="https://ae01.alicdn.com/kf/Hb1e3aab477ba428a86d37b5faf3bf0fd2.jpg" alt=""></figure>
<p>配置for控制器</p>
<figure data-type="image" tabindex="19"><img src="https://ae01.alicdn.com/kf/H7ac93b17b5c8422d8130391e1ffce8d6j.jpg" alt=""></figure>
<p>修改正则提取中的配置</p>
<figure data-type="image" tabindex="20"><img src="https://ae01.alicdn.com/kf/He614b551973c4cdfb3cb3241b6243a53f.jpg" alt=""></figure>
<p>在查询订单中使用遍历出来得变量即可</p>
<figure data-type="image" tabindex="21"><img src="https://ae01.alicdn.com/kf/H2c818e481014438bb777bc1882f70dd11.jpg" alt=""></figure>
<h3 id="62-if">6.2 if</h3>
<p>添加if控制器</p>
<figure data-type="image" tabindex="22"><img src="https://ae01.alicdn.com/kf/H95720511fb0e49c89acb7b98b4b3d177m.jpg" alt=""></figure>
<p>确定判断逻辑</p>
<p>在第一步登录取样器中提取登录结果</p>
<figure data-type="image" tabindex="23"><img src="https://ae01.alicdn.com/kf/Hea9fbfb1ca494e949a03706fdc58780b2.jpg" alt=""></figure>
<p>然后分别配置登录成功与登录失败需要执行的步骤</p>
<figure data-type="image" tabindex="24"><img src="https://ae01.alicdn.com/kf/Hf72d6d092f1241f88b38b4fc72bd6d27c.jpg" alt=""></figure>
<h2 id="7-开关控制器">7 开关控制器</h2>
<p>方式一：通过0和1决定执行哪个，0执行第一个，1执行第二个</p>
<p>方式二：通过取样器名字决定执行哪个，名字必须与取样器完成一致才会执行</p>
<figure data-type="image" tabindex="25"><img src="https://ae01.alicdn.com/kf/H2fcf3a500b5c46f98338ac6247c607a3l.jpg" alt=""></figure>
<h2 id="8-循环控制器">8  循环控制器</h2>
<p>对单个取样器进行循环操作</p>
<figure data-type="image" tabindex="26"><img src="https://ae01.alicdn.com/kf/H7b218c4b63b14a798a0b0b699912518e0.jpg" alt=""></figure>
<h1 id="第七章-并发数">第七章  并发数</h1>
<h2 id="1-平均并发数">1 平均并发数</h2>
<p>计算平均并发数</p>
<pre><code>平均并发数 = 每日活跃用户数*用户使用时间/访问时间段
</code></pre>
<p>一个系统，每天2000个用户访问，访问时间集中在上午9-12点，平均每个用户访问10分钟，计算并发数</p>
<pre><code>(2000*10)/(60*3)=111(大约)
# 2000为用户数量
# 10为用户使用时间
# 60*3是为了前后单位统一，访问时间段为3个小时
</code></pre>
<h2 id="2-峰值用户数">2 峰值用户数</h2>
<pre><code>峰值用户数 = 平均并发数 + 3*sqrt（平均并发数）
</code></pre>
<h1 id="第八章-搭建资源监控环境">第八章  搭建资源监控环境</h1>
<h2 id="1服务端">1.服务端</h2>
<ul>
<li>在服务器端安装java，并且配置环境变量</li>
</ul>
<pre><code>创建java存放目录：/usr/local/java
Linux配置环境变量
cd ~   # 进入root目录
vi .bash_profile


yum -y install java-1.8.0-openjdk*
</code></pre>
<ul>
<li>上传ServerAgent.zip到/opt目录，然后解压</li>
<li>进入ServerAgent目录，启动该代理</li>
</ul>
<pre><code>./startAgent.sh     # 启动监控代理
./startAgent.sh &amp;   # 以进程方式启动监控代理
</code></pre>
<h2 id="2-jmeter端">2. jmeter端</h2>
<ul>
<li>jmeter安装插件管理器</li>
</ul>
<pre><code>将jmeter-plugins-manager-1.3.jar放至jmeter安装目录下的lib\ext中
重启jmeter
</code></pre>
<ul>
<li>在option菜单中启动插件管理器</li>
<li>在打开的插件管理器安装</li>
</ul>
<figure data-type="image" tabindex="27"><img src="https://ae01.alicdn.com/kf/Hbedb18dfb2814564a30a0c8d999c9cdaX.jpg" alt=""></figure>
<ul>
<li>在jmeter脚本线程组中添加jpgc监听器</li>
</ul>
<figure data-type="image" tabindex="28"><img src="https://ae01.alicdn.com/kf/H5b543b96f5bf4a47b8cf1d6762a07b63I.jpg" alt=""></figure>
<ul>
<li>配置该监听器</li>
</ul>
<figure data-type="image" tabindex="29"><img src="https://ae01.alicdn.com/kf/H35f126cf112a46d4a8dd7b9cb745f989a.jpg" alt=""></figure>
<ul>
<li>不要忘了设置线程组，配置几个线程，运行时间等</li>
</ul>
<figure data-type="image" tabindex="30"><img src="https://ae01.alicdn.com/kf/Hbc5ce94529824970b066116118ba3326H.jpg" alt=""></figure>
<h1 id="第九章-性能测试流程">第九章  性能测试流程</h1>
<p>需求分析(学习业务，分析规格文档)	<br>
场景设计(测试场景、测试类型、并发数、步长、思考时间)<br>
编写计划<br>
环境搭建、数据准备、脚本开发<br>
性能测试(性能数据收集)<br>
性能分析、性能调优<br>
性能测试报告<br>
结束</p>
<h1 id="第十章-centos搭建ecshop">第十章  centos搭建ecshop</h1>
<p>1.上传xampp压缩包并解压</p>
<pre><code>tar -xzvf xampp-linux-1.7.7.tar.gz
</code></pre>
<p>2.进入lampp目录</p>
<p>3.输入命令启动xampp</p>
<pre><code class="language-shell">./lampp start

# 如果提示xampp只能在32位系统运行
# 使用yum命令安装32位包
yum install -y glibc*i686
</code></pre>
<p>3.启动成功后，验证是否启动成功</p>
<pre><code>netstat -anp|grep 80   # 查看httpd端口是否启动，httpd就是Apache的进程
netstat -anp|grep 3306 # 查看mysql的端口是否存在
</code></pre>
<figure data-type="image" tabindex="31"><img src="https://ae01.alicdn.com/kf/Hfb9353eed354499998261198cfee1c113.jpg" alt=""></figure>
<p>4.上传ecshop项目包到htdocs目录</p>
<p>5.解压安装即可</p>
<h1 id="第十一章-练习">第十一章  练习</h1>
<h2 id="1-ecshop登录实现参数化">1. ecshop登录实现参数化</h2>
<h3 id="11-创建登录脚本">1.1 创建登录脚本</h3>
<p>创建测试计划</p>
<figure data-type="image" tabindex="32"><img src="https://ae01.alicdn.com/kf/H65adaa3cef914798a1298bdd3d6181e7F.jpg" alt=""></figure>
<p>添加线程组</p>
<figure data-type="image" tabindex="33"><img src="https://ae01.alicdn.com/kf/Hc06b39cdfaa14369b46059d83e0103ebT.jpg" alt=""></figure>
<p>添加取样器</p>
<figure data-type="image" tabindex="34"><img src="https://ae01.alicdn.com/kf/Hba10332425544c2a9cfef61b91edcaa7v.jpg" alt=""></figure>
<p>配置取样器</p>
<figure data-type="image" tabindex="35"><img src="https://ae01.alicdn.com/kf/Hfcad5d3d0d4e41e399c60d7edd9b6268C.jpg" alt=""></figure>
<p>添加观察结果树</p>
<figure data-type="image" tabindex="36"><img src="https://ae01.alicdn.com/kf/Hda3fe507ea8e462aa67808688d01c3dd3.jpg" alt=""></figure>
<p>验证是否登录成功</p>
<figure data-type="image" tabindex="37"><img src="https://ae01.alicdn.com/kf/Hb1628955ed7549569aa86975ec8a2a6bD.jpg" alt=""></figure>
<h3 id="12-添加参数化组件">1.2 添加参数化组件</h3>
<p>添加参数读取组件</p>
<figure data-type="image" tabindex="38"><img src="https://ae01.alicdn.com/kf/Hacb60fb62b384eaa8ca9d40858f889f6S.jpg" alt=""></figure>
<p>创建参数化文件</p>
<figure data-type="image" tabindex="39"><img src="https://ae01.alicdn.com/kf/H0f3376fbac59496c8640abd41e76a0bdP.jpg" alt=""></figure>
<p>配置参数化组件</p>
<figure data-type="image" tabindex="40"><img src="https://ae01.alicdn.com/kf/H6c324e37688641e7961760e7f4c9171bC.jpg" alt=""></figure>
<p>重新用参数化形式配置取样器</p>
<figure data-type="image" tabindex="41"><img src="https://ae01.alicdn.com/kf/H646a447f0682468b89276f91603a6c26Z.jpg" alt=""></figure>
<h3 id="13-添加循环控制器">1.3 添加循环控制器</h3>
<p>添加一个循环控制器</p>
<figure data-type="image" tabindex="42"><img src="https://ae01.alicdn.com/kf/Hcd03ffe8bd3f45788773005b239082845.jpg" alt=""></figure>
<p>配置循环控制器，循环执行次数为3次，与参数化源文件数量对应</p>
<figure data-type="image" tabindex="43"><img src="https://ae01.alicdn.com/kf/Ha88f4d50a6b04faa8bce9347644a340e1.jpg" alt=""></figure>
<h3 id="14-验证结果">1.4 验证结果</h3>
<p>执行，验证是否三个账号都登录成功</p>
<p>添加断言</p>
<figure data-type="image" tabindex="44"><img src="https://ae01.alicdn.com/kf/H2097954b56b345a69cae172e9414a70dO.jpg" alt=""></figure>
<p>手工验证</p>
<figure data-type="image" tabindex="45"><img src="https://ae01.alicdn.com/kf/Hbfed1219a6f4492e82d25b5f7d647f7dj.jpg" alt=""></figure>
<h2 id="2-ecshop浏览器商品">2. ecshop浏览器商品</h2>
<h3 id="21-准备工作">2.1 准备工作</h3>
<p>以登录脚本为基础</p>
<ul>
<li>去掉参数化配置</li>
<li>去掉循环控制器</li>
<li>保证登录成功</li>
</ul>
<h3 id="22-关联cookie">2.2 关联cookie</h3>
<p>添加cookie关联</p>
<figure data-type="image" tabindex="46"><img src="https://ae01.alicdn.com/kf/H81a3722b00014dfc8de90e18f4bb76c0P.jpg" alt=""></figure>
<h3 id="23-配置用户自定义变量">2.3 配置用户自定义变量</h3>
<p>配置用户自定义变量可以在创建多个取样器时，方便取样器的配置统一性</p>
<p>添加用户自定义变量组件</p>
<figure data-type="image" tabindex="47"><img src="https://ae01.alicdn.com/kf/H137122734c9b44878fa892f4e798fcfa5.jpg" alt=""></figure>
<p>配置用户自定义变量组件</p>
<figure data-type="image" tabindex="48"><img src="https://ae01.alicdn.com/kf/H0955c1164bbc42dc81d761cc0b3dfa58K.jpg" alt=""></figure>
<p>修改登录取样器，调用用户自定义变量</p>
<figure data-type="image" tabindex="49"><img src="https://ae01.alicdn.com/kf/H6c4b60df30bb463bad93f47e7144e568j.jpg" alt=""></figure>
<p>修改浏览商品取样器配置</p>
<figure data-type="image" tabindex="50"><img src="https://ae01.alicdn.com/kf/He4888e37d6334c3cb91dd657ae8cabe4R.jpg" alt=""></figure>
<h3 id="24-观察结果与断言">2.4 观察结果与断言</h3>
<p>为浏览器商品分别添加结果树，断言，以及整个线程组的聚合报告</p>
<figure data-type="image" tabindex="51"><img src="https://ae01.alicdn.com/kf/Hc99131ad367f4d2084278e9c3805df9a1.jpg" alt=""></figure>
<h3 id="25-验证结果">2.5 验证结果</h3>
<p>执行脚本，查看聚合报告中的结果是否正确</p>
<figure data-type="image" tabindex="52"><img src="https://ae01.alicdn.com/kf/H872d4d78d88a4c169dd8825b62ce982b0.jpg" alt=""></figure>
<p>负载测试  持续120s</p>
<p>sql语句调优</p>
<h1 id="第十三章-图形化报告">第十三章 图形化报告</h1>
<p>以命令行的模式运行jmeter脚本,生成图形化的报告</p>
<pre><code>jmeter -n -t C:\Users\Administrator\Desktop\lejifen.jmx -l result.jtl -e -o E:\apache-jmeter-5.1.1\bin\WebReport
</code></pre>
<ul>
<li>n：非GUI模式执行JMeter；</li>
<li>t： 脚本文件(.jmx文件)的路径；</li>
<li>l： 指定生成测试结果的保存文件(.jtl格式)，此文件必须不存在；</li>
<li>e：测试结束后，生成测试报告；</li>
<li>o：用于存放测试报告的路径；</li>
</ul>
<blockquote>
<p>注意：如果要重新生成一份测试报告，都需要将Jmeter的bin目录下的jtl文件以及webreport文件夹进行删除。<br>
可以在Jmeter的bin目录下手动直接删除，也可以通过命令删除。</p>
</blockquote>
<pre><code>del /s /Q D:\Jmeter\apache-jmeter-3.2\bin\result.jtl //删除jtl文件
rd /s /Q D:\Jmeter\apache-jmeter-3.2\bin\WebReport //删除webreport文件夹
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2019 年中总结]]></title>
        <id>https://yihangliak.github.io/post/2019_mid_year</id>
        <link href="https://yihangliak.github.io/post/2019_mid_year">
        </link>
        <updated>2019-07-22T08:22:12.000Z</updated>
        <summary type="html"><![CDATA[<p>月亮总不会被太阳抛弃  所以等你的日子不值一提</p>
]]></summary>
        <content type="html"><![CDATA[<p>月亮总不会被太阳抛弃  所以等你的日子不值一提</p>
<!-- more -->
<p>不知不觉，19年已经过去大半啦<br>
马上就要再一次经历<code>happy birthday</code>的洗礼<br>
回顾这大半年  除了工作 好像没干啥事儿<br>
<strong>视力不断<code>↓</code></strong><br>
走在路上   四五米开外的东西  已是时见一斑<br>
<strong>体重不断<code>↑</code></strong><br>
办了张健身卡 从刚开始拿到卡的打鸡血模式 现在演变成了 耶 又下雨了 可以不用去跑步了的状态<br>
6月份  公司组织去桂林旅游<br>
WTF  大学毕业旅行就是去的桂林   时隔多年 竟想不到以这种方式故地重游<br>
想我一湖南人  张家界都没有去过 竟然去了桂林两次  还是旅游<br>
心态崩了<br>
最近迷上焦迈奇的歌   有一首里面写到<br>
<code>月亮总不会被太阳抛弃 所以等你的日子不值一提</code><br>
唱的真好  干的漂亮<br>
原来有时候  一个人干着不为人知的事情  very洒脱<br>
写这篇总结断断续续<br>
从早上写到晚上<br>
绞尽脑汁   东拼西凑<br>
可是到现在还是混乱得 宛如一片残垣<br>
得<br>
还是来根<code>寂寞</code>再说<br>
记忆是个好东西  可惜我没有<br>
以摆动的二郎腿结束这篇<code>zongjie</code><br>
愿顺利度过余下半年 白发少几根  体重减几斤  工资涨几分</p>
]]></content>
    </entry>
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yihangliak.github.io</id>
    <title>yihang&apos;s blog</title>
    <updated>2020-02-21T10:50:08.041Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yihangliak.github.io"/>
    <link rel="self" href="https://yihangliak.github.io/atom.xml"/>
    <subtitle>九万里风鹏正举   风休住</subtitle>
    <logo>https://yihangliak.github.io/images/avatar.png</logo>
    <icon>https://yihangliak.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, yihang&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[MySQL系列入门（四）：SQL语言]]></title>
        <id>https://yihangliak.github.io/post/VEx6epPa3/</id>
        <link href="https://yihangliak.github.io/post/VEx6epPa3/">
        </link>
        <updated>2020-02-21T10:20:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="四-sql语言">四、SQL语言</h1>
<h2 id="1数据表操作">1.数据表操作</h2>
<h3 id="11-创建表">1.1 创建表</h3>
<p>格式：</p>
<pre><code class="language-mysql">create table 表名(
    字段名 类型 约束
    字段名 类型 约束
    ...
)
</code></pre>
<p>例：创建学生表，字段要求如下：</p>
<ul>
<li>姓名（长度为10），年龄（不能为负）</li>
</ul>
<pre><code class="language-mysql">create table students(
    name varchar(10), 			-- varchar(10)表示10个字符长度
    age int unsigned			-- unsigned表示无符号，即不能为负
);
</code></pre>
<p>例：创建学生表，字段要求如下：</p>
<ul>
<li>姓名(长度为10)， 年龄，身高(保留小数点2位)</li>
</ul>
<pre><code class="language-mysql">create table students2(
	id int unsigned primary key auto_increment, -- 设置id为主键并自动编号，自动编号须与主键一起使用
    name varchar(10),
    age int unsigned,						  -- 不能为负整数
    height decimal(5, 2)					  -- 共存5位小数，小数占2位，整数占3位
);
</code></pre>
<h3 id="12-删除表">1.2 删除表</h3>
<p>格式：</p>
<pre><code class="language-mysql">-- 格式一：被删除的表不存在会报错
drop table 表名;

-- 格式二：如果存在表再删除表，先判断再删除
drop table if exists 表名;
</code></pre>
<h2 id="2数据操作-增删改查">2.数据操作-增删改查</h2>
<h3 id="21-简单查询">2.1 简单查询</h3>
<pre><code class="language-mysql">select * from 表名;

select * from students;  -- 查询学生表中的所有数据
</code></pre>
<h3 id="22-添加数据">2.2 添加数据</h3>
<h4 id="添加一行数据">添加一行数据</h4>
<p><strong>格式一：所有值与字段顺序对应</strong></p>
<pre><code class="language-mysql">insert into 表名 values(...);
</code></pre>
<blockquote>
<p>注意：主键列是自动增长，插入时需要占位，通常使用<code>0</code>或者<code>default</code>或者<code>null</code>来占位</p>
</blockquote>
<p>例：在学生表中插入一个学生信息</p>
<p>表结构为：</p>
<pre><code>| id | name | age | height |
</code></pre>
<p>插入：</p>
<pre><code class="language-mysql">insert into student values(0, 'zhangsan', 22, 170.23);
</code></pre>
<p>插入完成：</p>
<pre><code>| id | name     | age | height |
  1	   zhangsan	  22	170.23
</code></pre>
<p><strong>格式二：插入部分数据</strong></p>
<pre><code class="language-mysql">insert into 表名(字段1, ...) values(值1, ...)
</code></pre>
<p>例：插入一个学生，只插入姓名</p>
<pre><code class="language-mysql">insert into students(name) values('亚索');
</code></pre>
<p>插入完成：</p>
<pre><code>+----+----------+------+--------+
| id | name     | age  | height |
+----+----------+------+--------+
|  1 | zhangsan |   22 | 170.23 |
|  2 | lisi     |   21 | 160.13 |
|  3 | 亚索     | NULL | NULL   |      -- 插入在这儿
+----+----------+------+--------+
</code></pre>
<h4 id="添加多行数据">添加多行数据</h4>
<p><strong>方法一：写多条insert语句，语句间用分号隔开</strong></p>
<pre><code class="language-mysql">insert into students(name) values('安妮');
insert into students(name) values('金克斯');
insert into students values(0, '琴女', 19, 170);
</code></pre>
<p><strong>方法二：写一条insert语句，设置多个数据，数据间用逗号隔开</strong></p>
<pre><code class="language-mysql">-- 格式一  
insert into students values(0,'kasha', 100, 190),(0, 'lala', 99, 176.4);

-- 格式二
insert into students(name) values('光女一号'),('光女二号'),('光女三号');
</code></pre>
<h3 id="23-修改数据">2.3 修改数据</h3>
<p><strong>格式：</strong></p>
<pre><code class="language-mysql">update 表名 set 列1=值1,列2=值2... ... where 条件
</code></pre>
<p>**例：**修改<code>id</code>为<code>5</code>的学生数据，姓名改为<code>狄仁杰</code>，年龄改为<code>20</code></p>
<pre><code class="language-mysql">update students set name='狄仁杰', age=20 where id=5;
</code></pre>
<h3 id="24-删除数据">2.4 删除数据</h3>
<p><strong>格式：</strong></p>
<pre><code class="language-mysql">delete from 表名 where 条件
</code></pre>
<p>**例：**删除<code>id</code>为<code>6</code>的学生</p>
<pre><code class="language-mysql">delete from students where id=6;
</code></pre>
<blockquote>
<p>注意：对于重要的数据，不能轻易执行删除语句，一旦删除，数据无法恢复，推荐进行 <strong>逻辑删除</strong></p>
</blockquote>
<p><strong>逻辑删除</strong></p>
<ul>
<li>在表中添加<code>isdelete</code>字段，字段值默认为<code>0</code>，<code>0</code>表示未删除，<code>1</code>表示删除</li>
</ul>
<pre><code class="language-mysql">alter table students add column `isdelete` tinyint not null default '0' comment '用户是否被删除 0未删除 1已删除';
</code></pre>
<blockquote>
<p>注意：</p>
<ul>
<li><code>tinyint</code>类型如果指定<code>unsigned</code>只可以储存<code>0-255</code>的整数，且不能为负数，否则<code>-128-127</code></li>
<li><code>tinyint(2)</code>括号中的<code>2</code>是指存储宽度，位数不够自动左边补<code>0</code></li>
</ul>
</blockquote>
<ul>
<li>决定删除某条数据时，将<code>isdelete</code>字段设置为<code>1</code></li>
</ul>
<pre><code class="language-mysql">update students set isdelete=1 where id=1; -- 将id为1的学生删除
</code></pre>
<ul>
<li>以后在查询数据时，只查出<code>isdelete=0</code>的数据</li>
</ul>
<pre><code class="language-mysql">select * from students where isdelete=0;  -- 只查出没有被删除的学生
</code></pre>
<h2 id="3数据操作-查询">3.数据操作-查询</h2>
<h3 id="31-准备数据">3.1 准备数据</h3>
<p><strong>创建表</strong></p>
<pre><code class="language-mysql"> drop table if exists students;
 create table students (
		studentNo varchar(10) primary key,
		name varchar(10),
		sex varchar(1),
		hometown varchar(20),
		age tinyint(3), -- tinyint,小整数,有符号-128-127，无符号0-255,3表示显示宽度
		class varchar(10),
		card varchar(11)
 );
 
 insert into students values
 ('001', '王昭君', '女', '北京', 20, '1班', '11010119900'),
 ('002', '诸葛亮', '男', '上海', 18, '2班', '11010119900'),
 ('003', '张飞', '男', '南京', 24, '3班', '11010119900'),
 ('004', '白起', '男', '安徽', 22, '4班', '11010119900'),
 ('005', '大乔', '女', '天津', 19, '3班', '11010119900'),
 ('006', '孙尚香', '女', '河北', 18, '1班', '11010119900'),
 ('007', '百里玄策', '男', '山西', 20, '2班', '11010119900'),
 ('008', '小乔', '女', '河南', 15, '3班', NULL),
 ('009', '百里守约', '男', '湖南', 21, '1班', ''),
 ('010', '妲己', '女', '广东', 26, '2班', '11010119900'),
 ('011', '李白', '男', '北京', 30, '4班', '11010119900'),
 ('012', '孙膑', '男', '新疆', 26, '3班', '11010119900')
</code></pre>
<h3 id="32-查询所有">3.2 查询所有</h3>
<pre><code class="language-mysql">select * from students;
</code></pre>
<h3 id="33-查询指定字段">3.3 查询指定字段</h3>
<pre><code class="language-mysql">-- 单表时，直接字段名即可
select studentno, name from students;

-- 表名.字段名
select students.name from students;

-- 给表取表名
select s.name, s.hometown from students as s;

-- 给字段取别名
select name as 姓名, hometown as 籍贯 from students;
</code></pre>
<h3 id="34-去重复">3.4 去重复</h3>
<p>​	在<code>select</code>后面，字段前面使用<code>distinct</code>可以消除重复的行</p>
<pre><code class="language-mysql">select distinct hometown as 籍贯 from students;
</code></pre>
<blockquote>
<p>注意：如果使用<code>distinct</code>查询多列时，只有多列组合重复时才会去重</p>
</blockquote>
<pre><code class="language-mysql">select distinct id, name from actors
</code></pre>
<pre><code>id	name
1	吴亦凡     这个和最后一个姓名是重复的，但是组合去重时并没有去掉
2	王昭君
3	孙膑
4	陈军
5	刘美
6	吴亦凡
7	鹿晗
8	范闲
9	范若若
10	司理理
11	陈萍萍
12	吴亦凡
</code></pre>
<h3 id="35-条件查询">3.5 条件查询</h3>
<h4 id="语法">语法</h4>
<ul>
<li>
<p>使用<code>where</code>子句对表中的数据进行筛选，符合条件的数据会出现在结果集中</p>
</li>
<li>
<p>语法如下：</p>
</li>
</ul>
<pre><code class="language-mysql">select 字段1，字段2... from 表名 where 条件;
</code></pre>
<ul>
<li>例如：查询<code>studentno</code>为<code>010</code>的学生姓名</li>
</ul>
<pre><code class="language-mysql">select name from students where studentno=010;
</code></pre>
<h4 id="比较运算符">比较运算符</h4>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">大于</td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">小于</td>
</tr>
<tr>
<td style="text-align:center">&gt;=</td>
<td style="text-align:center">大于或等于</td>
</tr>
<tr>
<td style="text-align:center">&lt;=</td>
<td style="text-align:center">小于或等于</td>
</tr>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:center">等于</td>
</tr>
<tr>
<td style="text-align:center">！=</td>
<td style="text-align:center">不等于，两边是否不相等</td>
</tr>
</tbody>
</table>
<p>**例1：**查询 <strong>陈萍萍</strong> 的年龄</p>
<pre><code class="language-mysql">select age from students where name='陈萍萍';
</code></pre>
<p>**例2：**查询 <strong>20岁</strong> 以下的学生</p>
<pre><code class="language-mysql">select * from students where age&lt;20;
</code></pre>
<p>**例3：**查询籍贯不在北京的学生信息</p>
<pre><code class="language-mysql">select * from students where hometown!='北京';
</code></pre>
<p><strong>练习</strong></p>
<ol>
<li>查询学号是<code>007</code>的学生的信息</li>
<li>查询除了<code>1</code>班以外的学生信息</li>
<li>查询年龄大于<code>20</code>的学生姓名以及性别</li>
</ol>
<pre><code class="language-mysql">-- 1
select * from students where studentno=007;

-- 2
select * from students where class!='1班';

-- 3
select name,sex from students where age&gt;20;
</code></pre>
<h4 id="逻辑运算符">逻辑运算符</h4>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">and</td>
<td style="text-align:center">和，并且</td>
</tr>
<tr>
<td style="text-align:center">or</td>
<td style="text-align:center">或者</td>
</tr>
<tr>
<td style="text-align:center">not</td>
<td style="text-align:center">非（否定）</td>
</tr>
</tbody>
</table>
<p>**例1：**查询年龄小于20的女同学</p>
<pre><code class="language-mysql">select * from students where age&lt;20 and sex='女';
</code></pre>
<p>**例2：**查询女学生或者1班的学生</p>
<pre><code class="language-mysql">select * from students where sex='女' or class='1班'
</code></pre>
<p>**例3：**查询非天津的学生</p>
<pre><code class="language-mysql">select * from students where not hometown='天津'
</code></pre>
<p><strong>练习</strong></p>
<ol>
<li>查询河南或江苏的学生</li>
<li>查询1班的北京学生</li>
<li>查询非20岁的学生</li>
</ol>
<p><strong>答案</strong></p>
<pre><code class="language-mysql">-- 1
select * from students where hometown='河南' or hometown='江苏'
-- 2
select * from students where class='1班' and hometown='北京'
-- 3
select * from students where not age=20
</code></pre>
<h4 id="模糊查询">模糊查询</h4>
<ul>
<li><strong>关键字：</strong><code>like</code></li>
<li><code>%</code>表示一个或多个任意字符</li>
<li><code>_</code>表示任意一个字符</li>
</ul>
<p>**例1：**查询姓范的学生</p>
<pre><code class="language-mysql">select * from students where name like '范%'
</code></pre>
<p>**例2：**查询姓范并且名字只有一个字的学生</p>
<pre><code class="language-mysql">select * from students where name like '范_'
</code></pre>
<p>**例3：**查询名字以凡结尾的学生</p>
<pre><code class="language-mysql">select * from students where name like '%凡'
</code></pre>
<p>**例4：**查询名字中包含范的学生</p>
<pre><code class="language-mysql">select * from students where name like '%范%'
</code></pre>
<h4 id="范围查询">范围查询</h4>
<ul>
<li><code>in</code>表示在一个非连续的范围内</li>
</ul>
<p>**例：**查询家乡是北京或湖南或上海的学生</p>
<pre><code class="language-mysql">select * from students where hometown in ('北京','湖南','上海')
</code></pre>
<ul>
<li><code>between...and...</code>表示在一个连续的范围内</li>
</ul>
<p>**例：**查询年龄为18到20岁的学生信息</p>
<pre><code class="language-mysql">select * from students where age between 18 and 20
</code></pre>
<blockquote>
<p>注意：使用<code>between...and...</code>时，数字必须前小后大，否则查不到</p>
</blockquote>
<p><strong>练习</strong></p>
<ol>
<li>查询年龄在18或19或20的女学生</li>
<li>查询年龄在20到25以外的学生</li>
</ol>
<p><strong>答案</strong></p>
<pre><code class="language-mysql">-- 1
select * from students where age in (18,19,20) and sex='女'
-- 2
select * from students where not age between 20 and 25
</code></pre>
<h4 id="空判断">空判断</h4>
<ul>
<li><code>null</code>与<code>''</code>(空字符串)是不一样的</li>
<li>判断是否为空：<code>is null</code></li>
</ul>
<p>**例1：**查询没有填写身份证的学生</p>
<pre><code class="language-mysql">select * from students where card is null
</code></pre>
<p>**例2：**查询填写了身份证</p>
<pre><code class="language-mysql">select * from students where card is not null
</code></pre>
<h3 id="36-排序">3.6 排序</h3>
<ul>
<li><strong>关键字：</strong><code>order by</code></li>
<li>升序：<code>asc</code></li>
<li>降序：<code>desc</code></li>
</ul>
<blockquote>
<p>注意：排序时如果没写<code>asc/desc</code>，则默认<strong>升序</strong>排序</p>
</blockquote>
<p>**例1：**查询所有学生的信息并按照年龄升序排序</p>
<pre><code class="language-mysql">select * from students order by age asc
或者
select * from students order by age
</code></pre>
<p>**例2：**查询所有学生信息，按年龄从小到大排序，如果年龄相同时再按照学号从大到小排序</p>
<pre><code class="language-mysql">select * from students order by age asc,studentno desc
</code></pre>
<h3 id="37-聚合函数">3.7 聚合函数</h3>
<p>使用聚合函数可以快速得到统计数据，常用的聚合函数有如下五个</p>
<h4 id="count">count</h4>
<p>计算总行数</p>
<p>**例：**查询学生总数</p>
<pre><code class="language-mysql">select count(*) from students
</code></pre>
<h4 id="max">max</h4>
<p>求此列最大值</p>
<p>**例：**求女生的最大年龄</p>
<pre><code class="language-mysql">select max(age) from students where sex='女'
</code></pre>
<h4 id="min">min</h4>
<p>求此列最小值</p>
<p>**例：**求3班的最小年龄</p>
<pre><code class="language-mysql">select min(age) from students where class='3班'
</code></pre>
<h4 id="sum">sum</h4>
<p>求此列的和</p>
<p>**例：**查询北京学生的年龄总和</p>
<pre><code class="language-mysql">select sum(age) from students where hometown='北京'
</code></pre>
<h4 id="avg">avg</h4>
<p>求此列的平均值</p>
<p>**例：**查询女生的平均年龄</p>
<pre><code class="language-mysql">select avg(age) from students where sex='女'
</code></pre>
<p><strong>练习</strong></p>
<ol>
<li>查询所有学的最大年龄，最小年龄，平均年龄</li>
<li>3班一共有多少个学生</li>
<li>查询3班年龄小于20岁的学生有几个</li>
</ol>
<p><strong>答案</strong></p>
<pre><code class="language-mysql">-- 1
select max(age) from students
select min(age) from students
select avg(age) from students

-- 2
select count(*) from students where class='3班'

-- 3
select count(*) from students where class='3班' and age&lt;20
</code></pre>
<h3 id="38-分组函数">3.8 分组函数</h3>
<ul>
<li>按照字段分组，字段相同的数据会被放到一个组中</li>
<li>分组后，分组的依据列会显示在结果集中，其他列不显示</li>
<li>可以最分组后的数据进行统计，做  <strong>聚合运算</strong></li>
<li><strong>关键字：</strong><code>group by</code></li>
<li><strong>数据筛选关键字：</strong><code>having</code></li>
</ul>
<p>**例1：**查询各种性别的人数</p>
<pre><code class="language-mysql">select sex,count(*) from students group by sex
</code></pre>
<p>**例2：**查询各种年龄的人数</p>
<pre><code class="language-mysql">select age,count(*) from students group by age
</code></pre>
<p>**例3：**查询男生总人数</p>
<pre><code class="language-mysql">方案一：
select sex,count(*) from students group by sex having sex='男'
方案二：
select count(*) from students where sex='男'
</code></pre>
<blockquote>
<p>注意：</p>
<ul>
<li>
<p><code>where</code>是对表的数据进行筛选，属于对原始数据进行筛选</p>
</li>
<li>
<p><code>having</code>是对<code>group by</code>的结果进行筛选</p>
</li>
<li>
<p>两者是不同的</p>
</li>
</ul>
</blockquote>
<h3 id="39-分页">3.9 分页</h3>
<h4 id="获取部分行">获取部分行</h4>
<p>从大量的数据中获取一部分数据</p>
<p><strong>语法：</strong><code>select * from 表 limit 开始位置，数量</code></p>
<p>**例1：**查询前3行学生信息</p>
<pre><code class="language-mysql">select * from students limit 0,3
</code></pre>
<blockquote>
<p>注意：表中的数据是从0开始的</p>
</blockquote>
<p>**例2：**查询第4到第6行的学生信息</p>
<pre><code class="language-mysql">select * from students limit 3,3
</code></pre>
<h4 id="分页">分页</h4>
<p>每页显示<code>m</code>条数据，显示<code>n</code>页</p>
<pre><code class="language-mysql">select * from 表 limit m*(n-1),m
</code></pre>
<p>**例：**每页显示5条数据，一共显示3页</p>
<p>常规思路，首先应该统计总共有几条数据</p>
<pre><code class="language-mysql">select count(*) from students
</code></pre>
<p>第一页</p>
<pre><code class="language-mysql">select * from students limit 0,5
</code></pre>
<p>第二页</p>
<pre><code class="language-mysql">select * from students limit 5,5
</code></pre>
<p>第三页</p>
<pre><code class="language-mysql">select * from students limit 10,5
</code></pre>
<blockquote>
<p>总结出上面的公式</p>
</blockquote>
<h3 id="310-连接查询">3.10 连接查询</h3>
<p><strong>准备数据</strong></p>
<p>创建学生表并插入数据</p>
<pre><code class="language-mysql"> drop table if exists students;
 create table students (
		studentNo varchar(10) primary key,
		name varchar(10),
		sex varchar(1),
		hometown varchar(20),
		age tinyint(3), -- tinyint,小整数,有符号-128-127，无符号0-255,3表示显示宽度
		class varchar(10),
		card varchar(11)
 );
 
 insert into students values
 ('001', '王昭君', '女', '北京', 20, '1班', '11010119900'),
 ('002', '诸葛亮', '男', '上海', 18, '2班', '11010119900'),
 ('003', '张飞', '男', '南京', 24, '3班', '11010119900'),
 ('004', '白起', '男', '安徽', 22, '4班', '11010119900'),
 ('005', '大乔', '女', '天津', 19, '3班', '11010119900'),
 ('006', '孙尚香', '女', '河北', 18, '1班', '11010119900'),
 ('007', '百里玄策', '男', '山西', 20, '2班', '11010119900'),
 ('008', '小乔', '女', '河南', 15, '3班', NULL),
 ('009', '百里守约', '男', '湖南', 21, '1班', ''),
 ('010', '妲己', '女', '广东', 26, '2班', '11010119900'),
 ('011', '李白', '男', '北京', 30, '4班', '11010119900'),
 ('012', '孙膑', '男', '新疆', 26, '3班', '11010119900')
</code></pre>
<p>创建成绩表并插入数据</p>
<pre><code class="language-mysql">drop table if exists scores;
create table scores (
	id int unsigned primary key auto_increment,
	coursesNo int(10) unsigned,
	studentNo varchar(10),
	socre tinyint(4)
);
insert into scores values
(1, 1, '001', 90),
(2, 1, '002', 75),
(3, 2, '002', 98),
(4, 3, '001', 86),
(5, 3, '003', 80),
(6, 4, '004', 79),
(7, 5, '005', 96),
(8, 6, '006', 80);
</code></pre>
<p>创建课程表并插入数据</p>
<pre><code class="language-mysql">drop table if exists courses;
create table courses (
	coursesNo int unsigned primary key auto_increment,
	name varchar(10)
);
insert into courses values
(1, '数据库'),
(2, '自动化测试'),
(3, 'Linux'),
(4, '测试理论'),
(5, 'web网络'),
(6, 'App测试')
</code></pre>
<p>三张表全部准备完毕，如下图：</p>
<figure data-type="image" tabindex="1"><img src="https://pic.downk.cc/item/5e4a9ffd48b86553ee263fc4.png" alt="" loading="lazy"></figure>
<h4 id="等值连接">等值连接</h4>
<p><strong>语法：</strong><code>select * from 表1, 表2 where 表1.列=表2.列</code></p>
<p>**例：**查询学生信息以及学生成绩</p>
<pre><code class="language-mysql">select * from students as stu,scores as sco where stu.studentNo=sco.studentNo
</code></pre>
<p>查询的信息太多了，精简一下，只要学生姓名和成绩</p>
<pre><code class="language-mysql">select stu.name,sco.socre from students as stu,scores as sco where stu.studentNo=sco.studentNo
</code></pre>
<blockquote>
<p>注意：使用等值连接查询多表时，一定要先找出两张表中 <strong>共同</strong> 的字段，等值连接会把多个表生成一个 <strong>临时表</strong>，再使用<code>where</code>进行过滤</p>
</blockquote>
<h4 id="内连接">内连接</h4>
<blockquote>
<p>把多张表用相同的列关联起来，过滤掉不同的数据，只保留相同的数据</p>
</blockquote>
<p><strong>图示</strong></p>
<figure data-type="image" tabindex="2"><img src="https://pic.downk.cc/item/5e4ba12448b86553ee508c78.jpg" alt="" loading="lazy"></figure>
<p><strong>语法：</strong><code>select * from 表1 inner join 表2 on 表1.列=表2.列</code></p>
<p>**例1：**查询学生姓名以及学生成绩</p>
<pre><code class="language-mysql">select stu.name,sco.score from students as stu 
inner join scores as sco 
on stu.studentNo=sco.studentNo
</code></pre>
<blockquote>
<p>PS：分数字段名写错了</p>
<p>​		修改字段名<code>alter table scores change socre score tinyint(4)</code></p>
</blockquote>
<blockquote>
<p>注意： <strong>内连接</strong> 属于 <strong>等值连接</strong>，但是内连接不会创建临时表，所以<strong>性能</strong>会比较好些</p>
</blockquote>
<p>**例2：**查询课程信息以及课程的成绩</p>
<pre><code class="language-mysql">select co.name,sc.score from courses as co 
inner join scores as sc
on co.coursesNo=sc.coureseNo
</code></pre>
<p>**例3：**查询学生信息以及学生的课程对应的成绩信息</p>
<pre><code class="language-mysql">select stu.name as 学生姓名, cou.name as 课程名, sco.score as 分数
from students as stu,scores as sco,courses as cou
where stu.studentNo=sco.studentNo and sco.coureseNo=cou.coursesNo

-- 内连接写法
select stu.name as 学生姓名, cou.name as 课程名字, sco.score as 分数
from students as stu
inner join scores as sco
on stu.studentNo=sco.studentNo
inner join courses as cou
on sco.coursesNo=cou.coursesNo
</code></pre>
<pre><code>学生姓名 课程名 分数
王昭君	数据库	90
诸葛亮	数据库	75
诸葛亮	自动化测试	98
王昭君	Linux	86
张飞	Linux	80
白起	测试理论	79
大乔	web网络	96
孙尚香	App测试	80
</code></pre>
<p>**例4：**查询王昭君的成绩，要求显示姓名、课程号、成绩</p>
<pre><code class="language-mysql">select stu.name ,cou.name as courseName,sco.score from students as stu,scores as sco, courses as cou
where stu.studentNo=sco.studentNo and sco.coursesNo=cou.coursesNo
and stu.name='王昭君'

-- 内连接写法
select stu.name,cou.name as courseName,sco.score from students as stu
inner join scores as sco
on stu.studentNo=sco.studentNo
inner join courses as cou
on sco.coursesNo=cou.coursesNo
where stu.name='王昭君'
</code></pre>
<p>**例5：**查询王昭君的数据库成绩，要求显示姓名，课程名，成绩</p>
<pre><code class="language-mysql">select stu.name,cou.name as courseName,sco.score
from students as stu,scores as sco, courses as cou
where stu.studentNo=sco.studentNo and sco.coursesNo=cou.coursesNo
and stu.name='王昭君' and cou.name='数据库'

-- 内连接写法
select stu.name,cou.name as courseName,sco.score from students as stu
inner join scores as sco
on stu.studentNo=sco.studentNo
inner join courses as cou
on sco.coursesNo=cou.coursesNo
where stu.name='王昭君' and cou.name='数据库'
</code></pre>
<p>**例6：**查询男生中的最高成绩，要求显示姓名，课程名，成绩</p>
<pre><code class="language-mysql">select stu.name,stu.sex,cou.name as courseName,sco.score from students as stu, scores as sco,courses as cou
where stu.studentNo=sco.studentNo and sco.coursesNo=cou.coursesNo
and stu.sex='男'
order by sco.score desc
limit 0,1

-- 内连接写法
select stu.name,stu.sex,cou.name as courseName,sco.score from students as stu
inner join scores as sco
on stu.studentNo=sco.studentNo
inner join courses as cou 
on sco.coursesNo=cou.coursesNo
where stu.sex='男' 
order by sco.score desc
limit 1
</code></pre>
<h4 id="左连接">左连接</h4>
<blockquote>
<p>以左表为主表，左表的数据全部显示，左表有右表没有的显示为<code>null</code></p>
</blockquote>
<p><strong>图示：</strong></p>
<figure data-type="image" tabindex="3"><img src="C:%5CUsers%5Cliyihang%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200219000359395.png" alt="image-20200219000359395" loading="lazy"></figure>
<p><strong>语法：</strong><code>select * from 表1 left join 表2 on 表1.列=表2.列</code></p>
<p>**例1：**查询所有学生的成绩，包括没有成绩的学生</p>
<pre><code class="language-mysql">select stu.studentNo,stu.name,sco.score 
from students as stu
left join scores as sco
on stu.studentNo=sco.studentNo
</code></pre>
<blockquote>
<p>注意：<code>join</code>前面的表为 <strong>左表</strong>，后面的表为 <strong>右表</strong></p>
</blockquote>
<p>**例2：**查询所有学生的课程以及成绩，包括没有成绩的学生</p>
<pre><code class="language-mysql">select stu.studentNo,stu.name,sco.score,cou.name as courseName from students as stu
left join scores as sco
on stu.studentNo=sco.studentNo
left join courses as cou
on sco.coursesNo=cou.coursesNo
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://pic.downk.cc/item/5e4ce65248b86553ee8fd30d.jpg" alt="" loading="lazy"></figure>
<h4 id="右连接">右连接</h4>
<blockquote>
<p>以右表为主表，右表数据全部显示，右表有而左表没有的显示为<code>null</code></p>
</blockquote>
<p><strong>图示：</strong></p>
<figure data-type="image" tabindex="5"><img src="https://pic.downk.cc/item/5e4c0b0e48b86553ee68dc5c.jpg" alt="" loading="lazy"></figure>
<p><strong>语法：</strong><code>select * from 表1 right join 表2 on 表1.列=表2.列</code></p>
<p><strong>准备新数据</strong></p>
<p>在课程表中插入两门新课程</p>
<pre><code class="language-mysql">insert into courses values(7,'就业课'), (8, '安全性测试')
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://pic.downk.cc/item/5e4ce40848b86553ee8f48d9.jpg" alt="" loading="lazy"></figure>
<p>**例1：**查询所有课程的成绩，包括没有成绩的课程</p>
<pre><code class="language-mysql">select * from scores as sco
right join courses as cou
on sco.coursesNo=cou.coursesNo
</code></pre>
<p>**例2：**查询所有课程的成绩，包括没有成绩的课程，包括学生信息</p>
<pre><code class="language-mysql">select * from scores as sco
right join courses as cou 
on sco.coursesNo=cou.coursesNo
left join students as stu
on sco.studentNo=stu.studentNo
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://pic.downk.cc/item/5e4cea7d48b86553ee90fdcb.jpg" alt="" loading="lazy"></figure>
<h3 id="311-自关联">3.11 自关联</h3>
<p>在设计数据表时，一些具有层次结构的数据，往往可能需要多张表实现，如下图：</p>
<figure data-type="image" tabindex="8"><img src="https://pic.downk.cc/item/5e4cefac48b86553ee9221f4.jpg" alt="" loading="lazy"></figure>
<p>虽然这样可以实现，但是很难维护，因为当有多个层级时，就需要多张表才能实现。</p>
<p>其实，这样的数据可以用一张表来实现，设计结构如下</p>
<figure data-type="image" tabindex="9"><img src="https://pic.downk.cc/item/5e4cff7d48b86553ee9598e0.jpg" alt="" loading="lazy"></figure>
<p><strong>准备数据：</strong></p>
<pre><code class="language-mysql">create table areas (
		id int unsigned primary key auto_increment,
		name varchar(10),
		pid int(5)
);

insert into areas values
(1, '湖南省', null),
(2, '长沙市', 1),
(3, '益阳市', 1),
(4, '湖北省', null),
(5, '武汉市', 4),
(6, '荆州市', 4)
</code></pre>
<p>**例1：**查询一共有多少个省份</p>
<pre><code class="language-mysql">select * from areas
where pid is null
</code></pre>
<p>**例2：**查询湖南省所有的市</p>
<pre><code class="language-mysql">select * from areas as sheng, areas as shi
where sheng.id=shi.pid and sheng.name='湖南省'
</code></pre>
<blockquote>
<p>注意：从<code>areas</code>这张表中查询了两次，只有当两张表中的<code>id</code>与<code>pid</code>相等时，则表示结果为需要的市区信息，再追加一个过滤省份信息即可</p>
</blockquote>
<figure data-type="image" tabindex="10"><img src="https://pic.downk.cc/item/5e4cf49c48b86553ee93413c.jpg" alt="" loading="lazy"></figure>
<p>还可以使用 <strong>内连接</strong> 的写法：</p>
<pre><code class="language-mysql">select * from areas as sheng
inner join areas as shi
on sheng.id=shi.pid
where sheng.name='湖南省'
</code></pre>
<p><strong>增加难度</strong></p>
<p>再<code>areas</code>表中再增加一个 <strong>区</strong> 层级</p>
<pre><code class="language-mysql">insert into areas values
(7, '开福区', 2),
(8, '岳麓区', 2)
(9, '洪山区', 5)
</code></pre>
<p>图示如下：</p>
<figure data-type="image" tabindex="11"><img src="https://pic.downk.cc/item/5e4cfb4e48b86553ee94b236.jpg" alt="" loading="lazy"></figure>
<p>**例：**查询湖南省所有的区</p>
<pre><code class="language-mysql">select * from areas as shi
inner join areas as qu on shi.id=qu.pid
inner join areas as sheng on shi.pid=sheng.id
where sheng.name='湖南省'
</code></pre>
<figure data-type="image" tabindex="12"><img src="https://pic.downk.cc/item/5e4cfd9e48b86553ee952f1c.jpg" alt="" loading="lazy"></figure>
<h3 id="312-子查询">3.12 子查询</h3>
<blockquote>
<p>在一个<code>select</code>语句中，嵌入另外一个<code>select</code>语句，这就是 <strong>子查询</strong></p>
</blockquote>
<p>**主查询：**主要查询的对象，一般是第一个<code>select</code></p>
<p><strong>主查询与子查询的关系：</strong></p>
<ul>
<li>子查询是嵌入到主查询中的</li>
<li>子查询辅助主查询，要么充当条件，要么充当数据源</li>
<li>子查询是可以独立存在的语句，是一条完整的<code>select</code>语句</li>
</ul>
<p><strong>子查询的分类：</strong></p>
<ul>
<li>标量子查询：子查询返回的结果是一个数据</li>
<li>列子查询：子查询返回的结果是一列</li>
<li>行子查询：子查询返回的结果是一行</li>
<li>表级子查询：返回的结果是多行多列</li>
</ul>
<p><strong>标量子查询：</strong><br>
**例1：**查询大于平均年龄的学生</p>
<pre><code class="language-mysql">-- 查询平均年龄
select avg(age) from students
-- 查询大于平均年龄的学生
select * from students where age&gt;21.5833
-- 上面用两条sql可以查出答案，但是如果在执行完第一条sql后数据发生了变化，那么最终查询结果会错误
-- 讲两条sql合在一起，就是子查询
select * from students where age&gt;(select avg(age) from students)
</code></pre>
<p>**例2：**查询王昭君的成绩</p>
<pre><code class="language-mysql">-- 先把王昭君的学号查出来
select studentNo from students where name='王昭君';
-- 再拿着查出的学号区成绩表中查询成绩
select score from scores where studentNo=001
-- 组合成子查询
select score from scores where studentNo=(select studentNo from students where name='王昭君')
</code></pre>
<p><strong>列子查询</strong><br>
**例1：**查询18岁学生的成绩，要求显示成绩</p>
<pre><code class="language-mysql">-- 先从学生表中查出18岁学生的学号
select studentNo from students where age=18
-- 再拿着拿出的学号去成绩表中查询成绩，注意有多个学号要查
select score from scores where studentNo in (002, 006)
-- 组合成列子查询
select score from scores where studentNo in (select studentNo from students where age=18)
</code></pre>
<p><strong>行子查询</strong></p>
<p>**例1：**查询年龄最大的男生的信息</p>
<pre><code class="language-mysql">-- 查询男生中年龄最大的学生信息
select * from students where sex='男' order by age desc limit 1
-- select age from students order by age desc limit 1
select * from students where (sex,age) = (select sex,age from students where sex='男' order by age desc limit 1)
</code></pre>
<blockquote>
<p>上面的解法只是为了演示行子查询，并不是最优解法</p>
</blockquote>
<p><strong>表子查询：</strong></p>
<p>**例：**查询数据库和自动化测试课程的成绩</p>
<pre><code class="language-mysql">-- 先查出数据库与自动化课程的编号
select * from courses where name in ('数据库', '自动化测试')
-- 再拿着查出的编号去成绩表查询成绩
select * from scores where studentNo in (1,2)
-- 组合成表子查询
select * from scores as sc
inner join (select * from courses where name in ('数据库', '自动化测试')) as c
on sc.coursesNo=c.coursesNo
</code></pre>
<p><strong>子查询拓展</strong></p>
<p>**例1：**查询18到20岁的学生信息</p>
<pre><code class="language-mysql">select * from students where age in (select age from students where age between 18 and 20)
</code></pre>
<p><strong>例2：</strong> 查询小于18岁的学生信息</p>
<pre><code class="language-mysql">select * from students where age in (select age from students where age&lt;18)
</code></pre>
<h3 id="313-查询演练">3.13 查询演练</h3>
<p><strong>准备数据</strong></p>
<pre><code class="language-mysql">create table goods(
    id int unsigned primary key auto_increment,  -- 编号，主键，无符号，自动增长
    name varchar(150),
    cate varchar(40),
    brand_name varchar(40),
    price decimal(10,3) default 0,  -- 小数，总共10位，小数占3位，正数占7位
    is_show bit default 1,		-- 位变量，一般用来储存状态，值位0/1，类似true/false
    is_saleoff bit default 0
);
insert into goods values(0,'r510vc 15.6英寸笔记本','笔记本','华硕','3399',default,default); 
insert into goods values(0,'y400n 14.0英寸笔记本电脑','笔记本','联想','4999',default,default);
insert into goods values(0,'g150th 15.6英寸游戏本','游戏本','雷神','8499',default,default); 
insert into goods values(0,'x550cc 15.6英寸笔记本','笔记本','华硕','2799',default,default); 
insert into goods values(0,'x240 超极本','超级本','联想','4999',default,default); 
insert into goods values(0,'u330p 13.3英寸超极本','超级本','联想','4299',default,default); 
insert into goods values(0,'svp13226scb 触控超极本','超级本','索尼','7999',default,default); 
insert into goods values(0,'ipad mini 7.9英寸平板电脑','平板电脑','苹果','1998',default,default);
insert into goods values(0,'ipad air 9.7英寸平板电脑','平板电脑','苹果','3388',default,default); 
insert into goods values(0,'ipad mini 配备 retina 显示屏','平板电脑','苹果','2788',default,default); 
insert into goods values(0,'ideacentre c340 20英寸一体电脑 ','台式机','联想','3499',default,default); 
insert into goods values(0,'vostro 3800-r1206 台式电脑','台式机','戴尔','2899',default,default); 
insert into goods values(0,'imac me086ch/a 21.5英寸一体电脑','台式机','苹果','9188',default,default); 
insert into goods values(0,'at7-7414lp 台式电脑 linux ）','台式机','宏碁','3699',default,default); 
insert into goods values(0,'z220sff f4f06pa工作站','服务器/工作站','惠普','4288',default,default); 
insert into goods values(0,'poweredge ii服务器','服务器/工作站','戴尔','5388',default,default); 
insert into goods values(0,'mac pro专业级台式电脑','服务器/工作站','苹果','28888',default,default); 
insert into goods values(0,'hmz-t3w 头戴显示设备','笔记本配件','索尼','6999',default,default); 
insert into goods values(0,'商务双肩背包','笔记本配件','索尼','99',default,default); 
insert into goods values(0,'x3250 m4机架式服务器','服务器/工作站','ibm','6888',default,default); 
insert into goods values(0,'hmz-t3w 头戴显示设备','笔记本配件','索尼','6999',default,default); 
insert into goods values(0,'商务双肩背包','笔记本配件','索尼','99',default,default);
</code></pre>
<p>图示</p>
<figure data-type="image" tabindex="13"><img src="https://pic.downk.cc/item/5e4d330a48b86553eea795f3.jpg" alt="" loading="lazy"></figure>
<p><strong>1.查询电脑的平均价格，并保留两位小数</strong></p>
<pre><code class="language-mysql">select round(avg(price), 2) from goods
</code></pre>
<blockquote>
<p>新用到<code>round</code>函数，语法为<code>round(小数，精度)</code></p>
</blockquote>
<p><strong>2.查询所有大于平均价格的商品信息，并按降序排序</strong></p>
<pre><code class="language-mysql">select * from goods where price&gt;(select avg(price) from goods) order by price desc
</code></pre>
<blockquote>
<p>用到子查询与排序</p>
</blockquote>
<p><strong>3.查询类型为'超极本'的商品价格</strong></p>
<pre><code class="language-mysql">select price from goods where cate='超级本'
</code></pre>
<p><strong>4.查询价格大于或等于'超级本'的商品信息，并按价格降序排序</strong></p>
<pre><code class="language-mysql">select * from goods 
where price &gt;=any (select price from goods where cate='超级本') order by price desc
</code></pre>
<blockquote>
<p>用到了<code>any</code>,当子查询返回一列多个数据时，匹配其中的某个或多个</p>
</blockquote>
<h3 id="314数据分表">3.14数据分表</h3>
<p><strong>创建商品类型表</strong></p>
<pre><code class="language-mysql">create table goods_cate(
		id int unsigned primary key auto_increment,
		cate_name varchar(10)
)
</code></pre>
<p><strong>查询商品表中的所有类别</strong></p>
<pre><code class="language-mysql">-- select cate from goods group by cate
select distinct cate from goods
</code></pre>
<p><strong>将查询到的类别数据直接插入到类型表</strong></p>
<pre><code class="language-mysql">insert into goods_cate(cate_name) select distinct(cate) from goods
</code></pre>
<p><strong>创建商品品牌表同时将商品表中查询到的所有品牌类型插入进去</strong></p>
<pre><code class="language-mysql">create table goods_brand (
	brand_id int unsigned primary key auto_increment,
	brand_name varchar(10)
) select distinct(brand_name) from goods
</code></pre>
<blockquote>
<p>注意：创建与插入时的字段名字要 <strong>一致</strong>，否则就会自动创建查询时的字段名并插入</p>
</blockquote>
<p><strong>通过商品类型表来更新商品表</strong></p>
<pre><code class="language-mysql">update goods as g
inner join goods_cate as gc on g.cate=gc.cate_name
set g.cate=gc.id
</code></pre>
<p><strong>通过商品品牌表来更新商品表</strong></p>
<pre><code class="language-mysql">update goods as g
inner join goods_brand as gb on g.brand_name=gb.brand_name
set g.brand_name=gb.brand_id
</code></pre>
<p><strong>修改商品表的字段名</strong></p>
<figure data-type="image" tabindex="14"><img src="https://pic.downk.cc/item/5e4d429748b86553eeacd5e7.jpg" alt="" loading="lazy"></figure>
<p><strong>连接查询</strong></p>
<p>连接三张表来进行查询</p>
<p>改造后，商品表的字段数据占用会缩小（节省硬盘空间），便于日后数据的维护，编辑类别与品牌会快捷很多</p>
<pre><code class="language-mysql">select * from goods as g
inner join goods_cate as gc on g.cate_id=gc.id
inner join goods_brand as gb on g.brand_id=gb.brand_id
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL系列入门（三）：Navicat的使用]]></title>
        <id>https://yihangliak.github.io/post/c7olK_1tf/</id>
        <link href="https://yihangliak.github.io/post/c7olK_1tf/">
        </link>
        <updated>2020-02-21T10:18:37.000Z</updated>
        <content type="html"><![CDATA[<h1 id="三-navicat使用">三、Navicat使用</h1>
<h2 id="1连接">1.连接</h2>
<figure data-type="image" tabindex="1"><img src="https://pic.superbed.cn/item/5df1ef951f8f59f4d66bef7d.jpg" alt="" loading="lazy"></figure>
<h2 id="2新建数据库">2.新建数据库</h2>
<ul>
<li>双击连接名（本机<code>MySQL</code>），当前面的<code>icon</code>变为 <strong>绿色</strong>，即表示连接成功</li>
<li>右击连接名，选择 <strong>新建数据库</strong></li>
<li>数据库名任填，字符集选择<code>utf8 -- UTF-8 Unicode</code>，排序规则选择<code>utf8_general_ci</code></li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://pic.superbed.cn/item/5df1f0b71f8f59f4d66cb282.jpg" alt="" loading="lazy"></figure>
<h2 id="3数据表操作">3.数据表操作</h2>
<h3 id="新建表">新建表</h3>
<ul>
<li>连接某个数据库，右键 <strong>表</strong> ，选择 <strong>新建表</strong></li>
<li>创建表时，至少要添加一个字段，填写字段名并选择好类型，然后点击 <strong>保存</strong> 按钮</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://pic2.superbed.cn/item/5df1f2911f8f59f4d66e022f.jpg" alt="" loading="lazy"></figure>
<h3 id="修改表">修改表</h3>
<p><strong>添加字段</strong></p>
<figure data-type="image" tabindex="4"><img src="https://pic.superbed.cn/item/5df1f5891f8f59f4d6712b6b.jpg" alt="" loading="lazy"></figure>
<p><strong>删除表</strong></p>
<figure data-type="image" tabindex="5"><img src="https://pic2.superbed.cn/item/5df1f5e91f8f59f4d67175b2.jpg" alt="" loading="lazy"></figure>
<h2 id="4数据操作-增删改查">4.数据操作-增删改查</h2>
<h2 id="5数据类型与约束">5.数据类型与约束</h2>
<h2 id="6数据库的备份与恢复">6.数据库的备份与恢复</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL系列入门（二）：安装MySQL]]></title>
        <id>https://yihangliak.github.io/post/YUswTYFuL/</id>
        <link href="https://yihangliak.github.io/post/YUswTYFuL/">
        </link>
        <updated>2020-02-21T10:17:23.000Z</updated>
        <content type="html"><![CDATA[<h1 id="二-安装mysql">二、安装MySQL</h1>
<h2 id="windows">Windows</h2>
<h3 id="1-下载安装包">1. 下载安装包</h3>
<ul>
<li>
<p>打开官方下载地址：https://dev.mysql.com/downloads/mysql/</p>
</li>
<li>
<p>默认是最新版本，但是最新版本不一定是学习的最佳版本，这里选择最流行的<code>5.6</code>版本</p>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://pic3.superbed.cn/item/5df1b8fb1f8f59f4d63ac39a.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://pic2.superbed.cn/item/5df1b9631f8f59f4d63b29cc.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://pic.superbed.cn/item/5df1b9871f8f59f4d63b57f6.jpg" alt="" loading="lazy"></figure>
<h3 id="2解压">2.解压</h3>
<p>​	解压下载好的压缩包至任意目录（推荐在任意盘符根目录），解压完成后的目录就是<code>mysql</code>的安装目录</p>
<h3 id="3配置">3.配置</h3>
<p>​	进入解压好的<code>mysql</code>目录，复制并打开<code>my-default.ini</code>文件，将其重命名为<code>my.ini</code>或<code>my.conf</code></p>
<blockquote>
<p>文件中的参考配置如下:</p>
</blockquote>
<pre><code class="language-ini">[mysql]
# 设置mysql客户端默认字符集
default-character-set=utf8 
[mysqld]
#设置3306端口
port = 3306 
# 设置mysql的安装目录
basedir=E:\mysql-5.6.46-winx64
# 设置mysql数据库的数据的存放目录
datadir=E:\mysql-5.6.46-winx64\data 
# 允许最大连接数
max_connections=200
# 服务端使用的字符集默认为8比特编码的latin1字符集
character-set-server=utf8
# 创建新表时将使用的默认存储引擎
default-storage-engine=INNODB
</code></pre>
<h3 id="4添加环境变量">4.添加环境变量</h3>
<p>​	在环境变量<code>PATH</code>中添加解压好的<code>mysql</code>文件中的<code>bin</code>目录的路径</p>
<p>​	如：<code>E:\mysql-5.6.46-winx64\bin</code></p>
<h3 id="5安装mysql服务">5.安装MySQL服务</h3>
<p>​	以 <strong>管理员身份</strong> 打开命令行窗口，切换到<code>mysql</code>所在的<code>bin</code>目录，输入<code>mysqld install</code>回车运行</p>
<figure data-type="image" tabindex="4"><img src="https://pic.superbed.cn/item/5df1e0151f8f59f4d65ca731.jpg" alt="" loading="lazy"></figure>
<blockquote>
<p>注意：一定要使用管理员打开命令行执行安装命令</p>
</blockquote>
<h3 id="6-启动mysql">6. 启动MySQL</h3>
<p>​	在命令行中输入：<code>net start mysql</code></p>
<pre><code class="language-shell">E:\mysql-5.6.46-winx64\bin&gt;net start mysql
MySQL 服务正在启动 .
MySQL 服务已经启动成功。
</code></pre>
<h3 id="7-登录mysql">7. 登录MySQL</h3>
<p>​	命令行输入：<code>mysql -u root -p</code>，（第一次登录无需密码）</p>
<h3 id="8修改密码">8.修改密码</h3>
<ul>
<li>切换到<code>mysql</code>库：<code>use mysql</code></li>
<li>执行：<code>update user set password=password(&quot;新密码&quot;) where user=&quot;root&quot;;</code></li>
<li>刷新权限：<code>flush privileges;</code></li>
</ul>
<h3 id="9停止mysql">9.停止MySQL</h3>
<p>​	命令行输入：<code>net stop mysql</code>（如需重启，先停止再启动）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL系列入门（一）：数据库的概念]]></title>
        <id>https://yihangliak.github.io/post/b_VV-Uhrz/</id>
        <link href="https://yihangliak.github.io/post/b_VV-Uhrz/">
        </link>
        <updated>2020-02-21T08:29:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-概念">一、概念</h1>
<h2 id="1-什么是数据库">1. 什么是数据库</h2>
<p>**数据库：**按照数据结构来组织、储存和管理数据的仓库</p>
<blockquote>
<p>**疑问：**我的数据可以存在<code>excel</code>等文件中，那还要数据库干嘛？<br>
这就引出以下数据存储的几个阶段：</p>
</blockquote>
<p><strong>人工管理阶段</strong></p>
<p>数据靠人工整理，储存和管理。不方便保存，查询和管理</p>
<p>典型的如古代的<code>结绳记事</code>，以及现代的<code>图书馆</code>等</p>
<figure data-type="image" tabindex="1"><img src="https://pic.downk.cc/item/5e4f985d48b86553ee37e9bf.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://pic.downk.cc/item/5e4f9a2048b86553ee384017.jpg" alt="" loading="lazy"></figure>
<p><strong>文件系统阶段</strong></p>
<p>将文件数据储存在硬盘上，通过文件管理系统，比人工方便很多。</p>
<p>但在查询数据内容时，依旧不太方便。想知道哪个文件里面有什么内容，还得一个个打开确认</p>
<figure data-type="image" tabindex="3"><img src="https://pic.downk.cc/item/5e4f9b2b48b86553ee3872a1.jpg" alt="" loading="lazy"></figure>
<p><strong>数据库系统阶段</strong></p>
<p>网页显示的商品信息</p>
<figure data-type="image" tabindex="4"><img src="https://pic.downk.cc/item/5e4f9c0c48b86553ee38ac7b.jpg" alt="" loading="lazy"></figure>
<p>数据库中储存的商品信息</p>
<figure data-type="image" tabindex="5"><img src="https://pic.downk.cc/item/5e4f9c2448b86553ee38b38e.jpg" alt="" loading="lazy"></figure>
<h2 id="2-关系型数据库rdbms">2. 关系型数据库（RDBMS）</h2>
<ul>
<li><code>RDBMS</code>全称<code>relational database management system</code></li>
<li>中文意思为：<strong>关系型数据库管理系统</strong></li>
<li>关系型数据库采用了关系模型（一对一，多对多... ...）来组织数据</li>
</ul>
<figure data-type="image" tabindex="6"><img src="https://pic1.superbed.cn/item/5dfc6ef276085c3289171fde.jpg" alt="" loading="lazy"></figure>
<blockquote>
<p>什么是关系型数据库？<br>
比如上图中，有两个表格，一个角色表，一个技能表。这个两个表格中有一列数据-姓名是相同的，我们用这个一列相同的数据来连接两个表格，使它们产生联系，一旦其中一个表格的数据更改了另外一个表格的数据也会跟着更改，这种联系使他们的数据具有一致性，这就是关系型数据库。</p>
</blockquote>
<h2 id="3-数据库分类与排名">3. 数据库分类与排名</h2>
<p>查看数据库排行榜：https://db-engines.com/en/ranking</p>
<figure data-type="image" tabindex="7"><img src="https://pic.superbed.cn/item/5dfc706276085c32891794f5.jpg" alt="" loading="lazy"></figure>
<blockquote>
<p>上述排名不与数据库使用安装数量相等</p>
</blockquote>
<p><strong>关系型</strong></p>
<ul>
<li><code>oracle</code>：甲骨文公司开发，收费软件，一般用于大型项目，如：银行，电信等</li>
<li><code>MySQL</code>：甲骨文公司收购<code>sun(java)</code>而来，开源免费数据库，<code>web</code>项目中使用最广泛</li>
<li><code>Microsoft SQL Server</code>：微软开发的项目中使用</li>
</ul>
<p><strong>非关系型</strong></p>
<ul>
<li><code>Redis</code>：高性能缓存数据库</li>
<li><code>SQLite</code>：轻量级数据库，主要用于移动端</li>
</ul>
<p><strong>关系型数据库核心元素</strong></p>
<ul>
<li><code>数据库</code>：这里的数据库指数据仓库，一个数据库系统可以有多个数据仓库</li>
<li><code>数据表</code>：一个数据仓库可以有多张数据表</li>
<li><code>数据列</code>：字段信息</li>
<li><code>数据行</code>：一条数据记录</li>
</ul>
<h2 id="4-sql">4. SQL</h2>
<blockquote>
<p><code>structured query language</code></p>
</blockquote>
<ul>
<li>
<p>结构化查询语言，用来操作关系型数据库的语言</p>
</li>
<li>
<p><code>SQL</code>不区分大小写</p>
</li>
</ul>
<h2 id="5-mysql">5. MySQL</h2>
<p>由瑞典<code>MySQL AB</code>开发，后来被<code>sun</code>收购，<code>sun</code>又被<code>oracle</code>收购。所以现在是<code>Oracle</code>旗下产品</p>
<blockquote>
<p>目前开源版本与收费版并存（其实以后全部闭源也没事，因为有出过其他好用的衍生版本）</p>
</blockquote>
<p>特点</p>
<ul>
<li>开源，免费</li>
<li>支持多平台</li>
<li>是学习数据库的首选</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一张图学习Python3]]></title>
        <id>https://yihangliak.github.io/post/he1qEtsn3/</id>
        <link href="https://yihangliak.github.io/post/he1qEtsn3/">
        </link>
        <updated>2019-11-26T06:46:04.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://ae01.alicdn.com/kf/Hd08faf2fb079423585c8fdda933016b9b.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[国庆快乐]]></title>
        <id>https://yihangliak.github.io/post/Happy-National-Day/</id>
        <link href="https://yihangliak.github.io/post/Happy-National-Day/">
        </link>
        <updated>2019-10-02T03:17:06.000Z</updated>
        <content type="html"><![CDATA[<p>国庆快乐！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTTP Runner]]></title>
        <id>https://yihangliak.github.io/post/F__PjWJCK/</id>
        <link href="https://yihangliak.github.io/post/F__PjWJCK/">
        </link>
        <updated>2019-09-27T01:35:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>HttpRunner 是一款面向 HTTP(S) 协议的通用测试框架，只需编写维护一份 YAML/JSON 脚本，即可实现自动化测试。</p>
<p><strong>优势</strong></p>
<ul>
<li>继承 Requests 的全部特性，轻松实现 HTTP(S) 的各种测试需求</li>
<li>采用 YAML/JSON 的形式描述测试场景，保障测试用例描述的统一性和可维护性</li>
<li>借助辅助函数（debugtalk.py），在测试脚本中轻松实现复杂的动态计算逻辑</li>
<li>支持完善的测试用例分层机制，充分实现测试用例的复用</li>
<li>测试前后支持完善的 hook 机制</li>
<li>响应结果支持丰富的校验机制</li>
<li>基于 HAR 实现接口录制和用例生成功能（har2case）</li>
<li>结合 Locust 框架，无需额外的工作即可实现分布式性能测试</li>
<li>执行方式采用 CLI 调用，可与 Jenkins 等持续集成工具完美结合</li>
<li>测试结果统计报告简洁清晰，附带详尽统计信息和日志记录</li>
<li>极强的可扩展性，轻松实现二次开发和 Web 平台化</li>
</ul>
<h1 id="环境准备">环境准备</h1>
<p><strong>HttpRunner</strong>目前有2个版本，1.x和2x版本</p>
<p>详见仓库：<a href="https://github.com/HttpRunner/HttpRunner">https://github.com/HttpRunner/HttpRunner</a></p>
<p><strong>使用pip安装：</strong></p>
<pre><code>pip install httprunner
</code></pre>
<p><strong>验证版本</strong></p>
<pre><code>hrun -V
</code></pre>
<h1 id="登录案例">登录案例</h1>
<p><strong>接口文档如下</strong></p>
<figure data-type="image" tabindex="1"><img src="https://ae01.alicdn.com/kf/H9faba9dad2a2470ba59e4e11eac4074aS.jpg" alt="" loading="lazy"></figure>
<p><strong>yml格式脚本如下</strong></p>
<pre><code class="language-yml">- config:                          # 全局配置项，作用域为整个测试用例文件
    name: logincase                # 测试用例名
    variables: {}
- test:                            # 测试步骤（可以有多个）
    name: login case1
    request:
        url: http://appapi.fecshop.com/v1/account/login
        method: POST
        headers:
            Content-Type: application/json
            User-Agent: python-requests/2.18.4
        json:
            username: admin
            password: admin123
    validate:                      # 断言
        - eq: [status_code, 200]
        - eq: [content.status, success]
        - eq: [content.code, 200]

</code></pre>
<p><strong>命令行中执行该脚本</strong></p>
<pre><code>hrun fecshop01_login.yml
</code></pre>
<p><strong>查看报告</strong><br>
<img src="https://ae01.alicdn.com/kf/H6ab4d4a855e54c0ea5d012468829066er.jpg" alt="" loading="lazy"></p>
<h1 id="关联token">关联token</h1>
<p>如何将上个接口的返回token，传给下个接口当做请求参数?这是最常见的一个问题了。解决这个问题其实很简单，我们只需取出token值，设置为一个中间变量a，下个接口传这个变量a就可以了。</p>
<p>比如 <strong>查询商品详情</strong> 接口，在请求中需要传入登录后token，接口文档如下：</p>
<figure data-type="image" tabindex="2"><img src="https://ae01.alicdn.com/kf/Hf3791bcadb304b608ca4b090a81bf292B.jpg" alt="" loading="lazy"></figure>
<p>那么在<code>HttpRunner</code>中可以使用<code>extract</code>提取<code>token</code>，比如：</p>
<pre><code class="language-yml">extract:
	- token: content.token
</code></pre>
<p><strong>案例脚本</strong></p>
<blockquote>
<p>查询商品详情（需登录）</p>
</blockquote>
<pre><code class="language-yml">- config:                          
    name: fetch_product              
    variables: {}
- test:                            
    name: login_success
    request:
        url: http://appapi.fecshop.com/v1/account/login
        method: POST
        headers:
            Content-Type: application/json
        json:
            username: admin
            password: admin123
    extract:
        - token: content.access-token           # 提取token
    validate:
        - eq: [status_code, 200]
        - eq: [content.status, success]
        - eq: [content.code, 200]

- test:
    name: fetch_product_success
    request:
        url: http://appapi.fecshop.com/v1/product/fetchone
        method: GET 
        headers:
            Content-Type: application/json
            Access-Token: $token               # 引用token
        json:
            id: 57bab0d5f656f2940a3bf56e
    validate:
        - eq: [content.code, 200]
        - eq: [content.message, fetch product success]

</code></pre>
<p><strong>测试报告</strong></p>
<figure data-type="image" tabindex="3"><img src="https://ae01.alicdn.com/kf/H1e08664510f940bb90331fc8433bd6a9M.jpg" alt="" loading="lazy"></figure>
<h1 id="测试执行">测试执行</h1>
<p><strong>指定测试报告存放目录</strong></p>
<pre><code>hrun xxx.yml --report-dir report_dir
</code></pre>
<p><strong>指定日志级别</strong></p>
<pre><code>hrun xxx.yml --log-level debug   # 最详细级别
</code></pre>
<h1 id="录制脚本">录制脚本</h1>
<p>使用<code>Fiddler</code>或其他抓包工具，将抓取到的数据保存成<code>har</code>文件，然后使用<code>HttpRunner</code>测试用例生成功能，快速生成测试用例。</p>
<p><strong>使用抓包工具抓取数据</strong></p>
<blockquote>
<p>以<code>幕布</code>登录为例</p>
</blockquote>
<pre><code>POST https://mubu.com/api/login/submit HTTP/1.1
Host: mubu.com
Connection: keep-alive
Content-Length: 51
Accept: application/json, text/javascript, */*; q=0.01
Origin: https://mubu.com
X-Requested-With: XMLHttpRequest
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Referer: https://mubu.com/login/password
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
Cookie: _ga=GA1.2.2093024221.1563846010; csrf_token=c91c2dd6-c26b-42ba-90fc-59997418fd82; data_unique_id=f8f42b69-299d-4ac7-9311-699f0e469ab3; SESSION=ZTc2Y2Q0YzgtYjdlNS00ZGRmLWI1ZDYtNmI3MDg4N2FlMmYz; _gid=GA1.2.347269472.1569567796; reg_entrance=https%3A%2F%2Fmubu.com%2F; user_persistence=59c84236-124f-4071-86d3-a1edef6dba3f; _gat=1

phone=手机号&amp;password=密码&amp;remember=true
</code></pre>
<p><strong>导出<code>har</code>文件</strong></p>
<figure data-type="image" tabindex="4"><img src="https://ae01.alicdn.com/kf/Hd67aef48078f47ea8bc6b610d85fe2c5S.jpg" alt="" loading="lazy"></figure>
<p><strong>转换脚本</strong><br>
进入<code>har</code>文件保存目录，打开命令行，输入如下命令将数据包转为<code>yml</code>格式的脚本文件：</p>
<pre><code>har2case xxx.har -2y
</code></pre>
<p><strong>转换后效果</strong></p>
<pre><code class="language-yml">config:
    name: testcase description
    variables: {}
teststeps:
-   name: /api/login/submit
    request:
        data:
            password: 密码
            phone: '手机'
            remember: 'true'
        headers:
            Content-Type: application/x-www-form-urlencoded; charset=UTF-8
            User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36
                (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36
            X-Requested-With: XMLHttpRequest
        method: POST
        url: https://mubu.com/api/login/submit
    validate:
    -   eq:
        - status_code
        - 200
    -   eq:
        - headers.Content-Type
        - application/json;charset=UTF-8
    -   eq:
        - content.code
        - 0
    -   eq:
        - content.msg
        - null

</code></pre>
<p><strong>测试报告</strong></p>
<figure data-type="image" tabindex="5"><img src="https://ae01.alicdn.com/kf/Hc8cf1a1932574fd798aa1669bc943e9cz.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTML基础]]></title>
        <id>https://yihangliak.github.io/post/dYxAqQpcF/</id>
        <link href="https://yihangliak.github.io/post/dYxAqQpcF/">
        </link>
        <updated>2019-09-20T09:18:38.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-什么是html">1. 什么是HTML</h2>
<p>HTML是用来描述网页的一种语言，英文全称是：<code>Hyper Text markup language</code></p>
<blockquote>
<p>注意：HTML不是编程语言，是一种标记语言</p>
</blockquote>
<p>HTML使用标记标签来描述网页，然后通过浏览器读取 HTML 文档，并以网页的形式显示出它们</p>
<h2 id="2-html标签">2. HTML标签</h2>
<p>HTML标签是由尖括号包围的关键词，比如<code>&lt;html&gt;</code></p>
<p>HTML标签一般都是成对出现的，比如<code>&lt;html&gt; &lt;/html&gt;</code></p>
<p>标签对中的第一个标签是<code>开始标签</code>，第二个标签是<code>结束标签</code></p>
<h2 id="3-html文件编辑以及文件格式">3. HTML文件编辑以及文件格式</h2>
<p>编辑HTML文件，可以使用<code>Notepad++</code></p>
<p>HTML文件的格式为：<code>htm 或 html</code>，两者没有任何差别，根据自己喜好选择即可</p>
<p>HTML文件保存好以后，可以通过浏览器<code>（chrome/IE/FireFox...）</code>打开进行浏览</p>
<h2 id="4-注释">4. 注释</h2>
<p>html文档代码中可以插入注释，注释是对代码的说明和解释，注释的内容不会显示在页面上，html代码中插入注释的方法是：</p>
<pre><code>&lt;!-- 这是一段注释  --&gt;
</code></pre>
<h2 id="5-html常用标签">5. HTML常用标签</h2>
<h3 id="51标题">5.1标题</h3>
<p>HTML标题通过<code>&lt;h1&gt;-&lt;h6&gt;</code>标签进行定义的，其中<code>&lt;h1&gt;</code>为最大级别标题，<code>&lt;h6&gt;为最小级别标题</code></p>
<p>搜索引擎会爬取标题标签编制索引，所以标题标签很重要</p>
<blockquote>
<p>代码</p>
</blockquote>
<pre><code class="language-html">&lt;h1&gt;This is heading 1&lt;/h1&gt;
&lt;h2&gt;This is heading 2&lt;/h2&gt;
&lt;h3&gt;This is heading 3&lt;/h3&gt;
&lt;h4&gt;This is heading 4&lt;/h4&gt;
&lt;h5&gt;This is heading 5&lt;/h5&gt;
&lt;h6&gt;This is heading 6&lt;/h6&gt;
</code></pre>
<blockquote>
<p>效果图</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://www.z4a.net/images/2019/08/21/Snipaste_2019-08-21_11-04-51.png" alt="Snipaste_2019-08-21_11-04-51.png" loading="lazy"></figure>
<h3 id="52段落">5.2段落</h3>
<p>HTML 段落是通过 <code>&lt;p&gt;</code> 标签进行定义的</p>
<blockquote>
<p>代码</p>
</blockquote>
<pre><code class="language-html">&lt;p&gt;这是段落。&lt;/p&gt;
&lt;p&gt;这是段落。&lt;/p&gt;
&lt;p&gt;这是段落。&lt;/p&gt;
</code></pre>
<blockquote>
<p>效果图</p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://www.z4a.net/images/2019/08/21/Snipaste_2019-08-21_11-11-07.png" alt="Snipaste_2019-08-21_11-11-07.png" loading="lazy"></figure>
<p><strong>换行</strong></p>
<p>换行标签是单个出现的</p>
<pre><code>不规范写法：&lt;br&gt;
规范写法：&lt;br /&gt;
</code></pre>
<p><strong>字符实体</strong></p>
<blockquote>
<p>有的时候需要在段落中插入一些空格，但是直接在代码中写入空格的话是无法被正常渲染成空格的，需要使用字符实体</p>
</blockquote>
<pre><code>&lt;!--  在段落前想缩进两个文字的空格，使用空格的字符实体：&amp;nbsp;   --&gt;
&lt;p&gt;
&amp;nbsp;&amp;nbsp;一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用&lt;br /&gt;
文本的方式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件&lt;br /&gt;
渲染成网页，显示的网页可以从一个网页链接跳转到另外一个网页。&lt;/p&gt;
</code></pre>
<p>注意：如果只是加入少量空格，是可以用 <strong>字符实体</strong> ，但如果需要大量插入空格，推荐使用样式去控制</p>
<h3 id="53链接">5.3链接</h3>
<p>HTML 链接是通过<code>&lt;a&gt;</code>标签进行定义的</p>
<blockquote>
<p>代码</p>
</blockquote>
<pre><code class="language-html">&lt;a href=&quot;http://www.w3school.com.cn&quot;&gt;This is a link&lt;/a&gt;
</code></pre>
<blockquote>
<p>效果图</p>
</blockquote>
<figure data-type="image" tabindex="3"><a href="https://www.z4a.net/image/Ucix29"><img src="https://www.z4a.net/images/2019/08/21/Snipaste_2019-08-21_11-17-07.png" alt="" loading="lazy"></a></figure>
<h3 id="54-块标签">5.4 块标签</h3>
<p><code>div</code>标签，表示一块内容，没有具体语义</p>
<p><code>p</code>标签与<code>div</code>的区别：</p>
<ul>
<li><code>p</code>带有空行等样式</li>
<li><code>div</code>标签不带任何样式</li>
<li><code>div</code>一般里面是可以嵌套的，比如嵌套<code>h，p</code>标签等</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python全栈（三）：多态]]></title>
        <id>https://yihangliak.github.io/post/phI3IExH8/</id>
        <link href="https://yihangliak.github.io/post/phI3IExH8/">
        </link>
        <updated>2019-09-13T15:44:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="面向对象三大特性">面向对象三大特性</h3>
<ol>
<li><strong>封装</strong> ： 根据职责将属性与方法封装到一个抽象的类中
<ul>
<li>定义类的准则</li>
</ul>
</li>
<li><strong>继承</strong> ： 实现代码的重用，相同的代码不需要重复的编写
<ul>
<li>设计类的技巧</li>
<li>子类针对自己特有的需求，编写特定的代码</li>
</ul>
</li>
<li><strong>多态</strong> ： 不同的子类对象调用相同的父类方法，产生不同的执行结果
<ul>
<li>多态可以增加代码的灵活度</li>
<li>多态以继承和重写父类方法为前提</li>
<li>多态不会影响到类的内部设计</li>
</ul>
</li>
</ol>
<blockquote>
<p>实例代码结构图示</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://ae01.alicdn.com/kf/H0b8155e7965844d0a5903c42093acf00R.png" alt="" loading="lazy"></figure>
<blockquote>
<p>代码</p>
</blockquote>
<pre><code class="language-python">class Dog(object):

    def __init__(self, name):
        self.name = name

    def game(self):
        print('%s正在玩耍... ...' %self.name)


class XiaoTianQuan(Dog):

    def game(self):
        print('%s正在天上玩耍... ...' %self.name)


class Person(object):

    def __init__(self, name):
        self.name = name

    def game_with_dog(self, dog):  # 将狗对象传入
        print(&quot;%s和%s正在玩耍&quot; %(self.name, dog.name))
        dog.game()  # 调用狗对象中的game方法


# xiaohei = Dog(&quot;小黑&quot;)    # 创建一条狗
xiaohei = XiaoTianQuan(&quot;哮天犬&quot;)  # 小黑传入game with dog只是普通玩耍，哮天犬传入以后再天上玩耍

xiaoming = Person(&quot;小明&quot;)  # 创建一个人
xiaoming.game_with_dog(xiaohei)  # 调用人类中的与狗玩耍方法，并将xiaohei传入
# 不同的子类对象，调用相同的父类对象，产生不同的结果，这就是多态
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python全栈（二）：私有属性与私有方法]]></title>
        <id>https://yihangliak.github.io/post/dz4T-djIi/</id>
        <link href="https://yihangliak.github.io/post/dz4T-djIi/">
        </link>
        <updated>2019-09-11T03:51:37.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>基本介绍</p>
</blockquote>
<ul>
<li><strong>私有属性</strong> 就是 <strong>对象</strong> 不希望公开的属性</li>
<li><strong>私有方法</strong> 就是 <strong>对象</strong> 不希望公开的方法</li>
</ul>
<blockquote>
<p>定义方式</p>
</blockquote>
<p>在定义属性或者方法时，在属性或者方法名前增加 <strong>两个下划线</strong> ，这就是定义私有属性或者私有方法</p>
<blockquote>
<p>提示</p>
</blockquote>
<ul>
<li>私有属性或者私有方法，在类外无法访问，但是在类中是可以访问的</li>
</ul>
<blockquote>
<p>代码示例</p>
</blockquote>
<p><strong>私有方法</strong></p>
<pre><code class="language-python">class Test():
    def test1(self):
        print('普通方法')
        self.__test3()     # 私有方法可以在类内部被调用

    def _test2(self):
        print('普通方法')

    def __test3(self):      # 双斜线开头则为私有方法
        print('私有方法')

t = Test()
t.test1()
t._test2()
# t.__test3()        # 私有方法在外部不能被调用
</code></pre>
<p><strong>私有属性</strong></p>
<pre><code class="language-python">class Person():
    def __init__(self, name):
        self.__name = name   # 双下划线+属性名=私有属性
        self.sex = 'boy'

    def get_name(self):
        return self.__name

    def set_name(self, new_name):   # 定义一个修改name属性的方法，一旦name长度小于5则报错
        if len(new_name)&gt;=5:
            self.__name = new_name   # 私有属性在类中是可以访问的
        else:
            print('error:名字长度需要大于或者等于5')


p = Person('zs')
print(p.sex)           # 普通属性在类外是可以访问到的
# print(p.__name)      # 私有属性在类外不能访问
p.set_name('hiiii')    # 调用修改name属性的方法
print(p.get_name())    # 访问被修改之后的name属性
</code></pre>
]]></content>
    </entry>
</feed>
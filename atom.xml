<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yihangliak.github.io</id>
    <title>Alex&apos;s Blog</title>
    <updated>2019-07-22T07:03:53.825Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yihangliak.github.io"/>
    <link rel="self" href="https://yihangliak.github.io/atom.xml"/>
    <subtitle>你好  靓仔   :D</subtitle>
    <logo>https://yihangliak.github.io/images/avatar.png</logo>
    <icon>https://yihangliak.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Alex&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Python Requests]]></title>
        <id>https://yihangliak.github.io/post/python-requests</id>
        <link href="https://yihangliak.github.io/post/python-requests">
        </link>
        <updated>2019-07-20T01:53:31.000Z</updated>
        <content type="html"><![CDATA[<h1 id="requests">Requests</h1>
<h1 id="1-安装requests">1. 安装requests</h1>
<p>命令行使用pip安装：<code>pip install requests</code></p>
<h1 id="2-get请求">2. get请求</h1>
<h2 id="21-get请求">2.1 get请求</h2>
<p>该方法用于向目标网址发送请求，接收响应</p>
<p><code>get</code>方法中的参数说明：</p>
<ul>
<li>url：必填，指定请求的目标网址</li>
<li>params：字典类型，指定请求参数</li>
</ul>
<p>该方法返回一个response对象，常用的方法和属性如下：</p>
<pre><code class="language-python">import requests

r = requests.get('https://api.github.com/events')  # 使用get请求访问github
print(r.status_code)                      # 打印响应状态码
print(r.text)                             # 返回str类型的响应
print(r.url)                              # 返回请求网站的url
print(r.encoding)                         # 返回响应时间的编码方式
print(r.cookies)                          # 返回响应的cookies信息
print(r.headers)                          # 返回响应头部
print(r.content)                          # 返回bytes类型的响应体
print(r.json())                           # 返回字典类型的响应体
</code></pre>
<h2 id="22-传递url参数">2.2 传递URL参数</h2>
<p>在get请求中，使用<code>params</code>关键字参数，可将字典类型的自定义参数传入到URL中进行拼接</p>
<pre><code class="language-python">import requests

url = 'http://httpbin.org/get'   # 定义请求目标网址
params = {                       # 定义自定义请求参数
    'key1':'value1',
    'key2':'value2'
}
r = requests.get(url, params=params)  # get请求中传入自定义参数
print(r.status_code)               # 打印状态码
print(r.url)                       # 打印传入参数后的URL
print(r.json())                    # 返回dict响应
</code></pre>
<pre><code># 状态码
200
# 传入参数后的url
http://httpbin.org/get?key1=value1&amp;key2=value2    
# 返回的dict类型数据中可以看到自定义参数
{'args': {'key1': 'value1', 'key2': 'value2'}, 'headers': {'Accept': '*/*', 'Accept-Encodinh': 'gzip, deflate', 'Connectioo': 'keep-alive', 'Host': 'httpbin.org', 'User-Agent': 'python-requests/2.18.4'}, 'origin': '119.123.77.203, 119.123.77.203', 'url': 'https://httpbin.org/get?key1=value1&amp;key2=value2'}

</code></pre>
<h2 id="23-实例">2.3 实例</h2>
<p>以百度搜索为例</p>
<pre><code class="language-python">import requests

url = 'http://www.baidu.com/s'
params = {'wd':'python'}
r = requests.get(url, params=params)  # get方法中传入params参数，可以讲自定义参数拼接到URL中
print(r.url)                          # 打印拼接过后的URL
print(r.text)                         # 打印响应文本内容
</code></pre>
<pre><code>http://www.baidu.com/s?wd=python
</code></pre>
<h1 id="3-post请求">3. post请求</h1>
<h2 id="31-data">3.1 data</h2>
<p><code>data</code>参数是字典类型，传入<code>form</code>里</p>
<pre><code class="language-python">import requests

r = requests.post('http://httpbin.org/post', data={'key1':'value1', 'key2':'value2'})
print(r.text)
</code></pre>
<pre><code>{
  &quot;args&quot;: {}, 
  &quot;data&quot;: &quot;&quot;, 
  &quot;files&quot;: {}, 
  &quot;form&quot;: {               # data传入到这里
    &quot;key1&quot;: &quot;value1&quot;, 
    &quot;key2&quot;: &quot;value2&quot;
  }, 
  &quot;headers&quot;: {
    &quot;Accept&quot;: &quot;*/*&quot;, 
    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, 
    &quot;Content-Length&quot;: &quot;23&quot;, 
    &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;, 
    &quot;Host&quot;: &quot;httpbin.org&quot;, 
    &quot;User-Agent&quot;: &quot;python-requests/2.18.4&quot;
  }, 
  &quot;json&quot;: null, 
  &quot;origin&quot;: &quot;119.123.77.203, 119.123.77.203&quot;, 
  &quot;url&quot;: &quot;https://httpbin.org/post&quot;
}
</code></pre>
<h2 id="32-json">3.2 json</h2>
<pre><code class="language-python">import requests

data = {'key1':'value1', 'key2':'value2'}
r = requests.post('http://httpbin.org/post', json=json.dumps(data))
print(r.text)
</code></pre>
<pre><code>{
  &quot;args&quot;: {}, 
  &quot;data&quot;: &quot;\&quot;{\\\&quot;key1\\\&quot;: \\\&quot;value1\\\&quot;, \\\&quot;key2\\\&quot;: \\\&quot;value2\\\&quot;}\&quot;&quot;,   # json传到这里
  &quot;files&quot;: {}, 
  &quot;form&quot;: {}, 
  &quot;headers&quot;: {
    &quot;Accept&quot;: &quot;*/*&quot;, 
    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, 
    &quot;Content-Length&quot;: &quot;46&quot;, 
    &quot;Content-Type&quot;: &quot;application/json&quot;, 
    &quot;Host&quot;: &quot;httpbin.org&quot;, 
    &quot;User-Agent&quot;: &quot;python-requests/2.18.4&quot;
  }, 
  &quot;json&quot;: &quot;{\&quot;key1\&quot;: \&quot;value1\&quot;, \&quot;key2\&quot;: \&quot;value2\&quot;}&quot;, 
  &quot;origin&quot;: &quot;119.123.77.203, 119.123.77.203&quot;, 
  &quot;url&quot;: &quot;https://httpbin.org/post&quot;
}

</code></pre>
<h2 id="33-实例">3.3 实例</h2>
<p>ecshop登录实例：</p>
<p>首先，通过<code>fiddler</code>抓包，查看ecshop登录请求头中的<code>Content-Type</code>，可以看到请求中的数据是以<code>表单</code>的形式发送到服务器的，如图：</p>
<p><img src="https://i.loli.net/2019/07/22/5d352bcc4179d47999.png" alt=""></p>
<p>所以，在使用<code>requests</code>发送<code>post</code>请求时，用户名与密码都会以<code>data</code>关键字参数传入</p>
<pre><code class="language-python">import requests
import re

url = 'http://localhost:82/ecshop/user.php'
datas = {'username':'liyihang', 'password':'tashi123', 'act':'act_login'}
r = requests.post(url, data=datas)
print(r.text)

# 可以用re模块，正则匹配的方式，提取出用户名
t = re.findall('&lt;font class=&quot;f4_b&quot;&gt;(.+?)&lt;/font&gt;', r.text)
print(t)
</code></pre>
<pre><code>['liyihang']
</code></pre>
<h1 id="4-保持会话">4. 保持会话</h1>
<p>一般在项目中，很多操作都是需要先登录再进行，所以需要先发送登录请求，登录成功后，保持登录状态，再进行后续操作，在requests中保持会话的方式如下：</p>
<pre><code class="language-python">import requests

# 保持登录，然后充值100
s = requests.session()  # 建立一个session

# 定义登录与充值需要的数据
url = 'http://localhost:82/ecshop/user.php'
datas1 = {'username':'liyihang', 'password':'tashi123', 'act':'act_login'}
datas2 = {'amount':'100', 'user_note':'jiekou', 'payment_id':'2', 'act':'act_account'}

# 使用建立的session对象发送登录请求
# 登录成功后会返回的cookie会被保存在该session中
r = s.post(url, data=datas1)
# print(r.cookies)
# 发送充值请求
r2 = s.post(url, data=datas2 )
print(r2.text)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Postman使用技巧]]></title>
        <id>https://yihangliak.github.io/post/postman-shi-yong-ji-qiao</id>
        <link href="https://yihangliak.github.io/post/postman-shi-yong-ji-qiao">
        </link>
        <updated>2019-07-19T03:40:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="postman使用教程">Postman使用教程</h1>
<h1 id="1介绍">1.介绍</h1>
<p>postman是一个接口测试工具，在做接口测试的时候，postman相当于一个客户端，他可以模拟用户发起各类的<code>HTTP请求</code>，将<code>请求</code>你数据发送至<code>服务端</code>，获取对应的响应结果，从而验证响应中的结果是否与预期值匹配；并确保开发人员能够及时处理接口中的bug，进而保证产品上线后的<code>稳定性</code>与<code>安全性</code></p>
<h1 id="2优势">2.优势</h1>
<ul>
<li>简单易用的图形用户界面</li>
<li>可以保存API请求历史记录</li>
<li>可用集合Runner来自动化测试</li>
<li>灵活的API监控</li>
</ul>
<h1 id="3安装">3.安装</h1>
<p>官网下载地址：<a href="https://www.getpostman.com/downloads/">https://www.getpostman.com/downloads/</a></p>
<p>下载安装包安装即可，注意系统位数</p>
<h1 id="4工具界面简介">4.工具界面简介</h1>
<p><img src="https://i.loli.net/2019/07/19/5d3122915979f43319.png" alt=""></p>
<h1 id="5第一个请求">5.第一个请求</h1>
<h2 id="51-创建请求选项卡">5.1 创建请求选项卡</h2>
<p>点击请求构建器中的<code>+</code>号，创建一个新的选项卡</p>
<p><img src="https://i.loli.net/2019/07/19/5d3123fcbb04589086.png" alt=""></p>
<h2 id="52-填写请求地址">5.2 填写请求地址</h2>
<p>以百度首页为例，在请求地址栏中填写请求地址：<code>https://www.baidu.com/?wd=python</code></p>
<p>请求方式选择<code>get</code></p>
<p><img src="https://i.loli.net/2019/07/19/5d312fc3d3cb542136.png" alt=""></p>
<p>在响应内容中：</p>
<ul>
<li><code>pretty</code>显示为格式化后的json</li>
<li><code>raw</code>是未经处理的数据</li>
<li><code>preview</code>可以预览HTML页面</li>
<li><code>status</code>为状态码</li>
</ul>
<h1 id="6使用用例集">6.使用用例集</h1>
<p>postman中可以通过新建<code>Collections</code>的方式来保存测试请求</p>
<h2 id="61-新建用例集">6.1 新建用例集</h2>
<p><img src="https://i.loli.net/2019/07/19/5d313511d1a8180663.png" alt=""></p>
<h2 id="62-添加请求到用例集">6.2 添加请求到用例集</h2>
<p>点击发送请求后的<code>save</code>按钮，保存请求到用例集</p>
<p><img src="https://i.loli.net/2019/07/19/5d3135a1c1aff47874.png" alt=""></p>
<h1 id="7断言">7.断言</h1>
<p>postman中可以为每个请求设置<code>断言</code>，用来判断接口功能是否正常</p>
<h2 id="71-添加断言">7.1 添加断言</h2>
<p>在请求界面中，点击<code>test</code>选项卡，然后在断言输入框中写入断言即可，注意要按<code>ctrl +s</code>保存</p>
<p><img src="https://i.loli.net/2019/07/19/5d31395bc5a2485354.png" alt=""></p>
<h2 id="72-查看断言结果">7.2 查看断言结果</h2>
<p>在响应界面中，点击<code>Test Results</code>可以查看到断言的结果</p>
<p><img src="https://i.loli.net/2019/07/19/5d3139b3199e187114.png" alt=""></p>
<h2 id="73-常用的断言方法">7.3 常用的断言方法</h2>
<pre><code class="language-js">pm.test(&quot;Status code is 200&quot;, function () {
    pm.response.to.have.status(200);
}); //断言状态码是200可以

pm.test(&quot;Body matches string “yunda”&quot;, function () {
    pm.expect(pm.response.text()).to.include(&quot;yunda&quot;);
}); //检查响应主体中是否包含指定字符串

pm.test(&quot;Response time is less than 200ms&quot;, function () {
    pm.expect(pm.response.responseTime).to.be.below(200);
}); //检查响应时间是否小于200ms
</code></pre>
<h1 id="8批量运行用例集">8.批量运行用例集</h1>
<p>用例集创建好并且每个请求都写好断言以后，则可以批量执行用例集，并生成相应的报告</p>
<p>首先点击用例集列表中的箭头，调出批量执行界面，点击<code>run</code></p>
<p><img src="https://i.loli.net/2019/07/19/5d3161067b60254081.png" alt=""></p>
<p>配置执行参数</p>
<p><img src="https://i.loli.net/2019/07/19/5d3161e332ee623513.png" alt=""></p>
<p>执行结果页面</p>
<p><img src="https://i.loli.net/2019/07/19/5d31622bc6e0673691.png" alt=""></p>
<h1 id="9设置环境变量">9.设置环境变量</h1>
<h2 id="91-添加环境变量">9.1 添加环境变量</h2>
<p>在postman中，设置环境变量可以快速变换接口地址</p>
<p>比如分别设置<code>生产环境</code>与<code>测试环境</code>环境变量，之后需要改变接口地址只需切换不同的环境即可</p>
<p><img src="https://i.loli.net/2019/07/19/5d3166b3ec8f688394.png" alt=""></p>
<h2 id="93-切换环境">9.3 切换环境</h2>
<p>在接口请求界面右上角可以切换该接口的环境，</p>
<p>在接口地址使用变量为双花括号包围变量名，如：</p>
<p><code>{{url}}autonumber/autoComNum?resultv2=1&amp;text=3102615141528</code></p>
<p><img src="https://i.loli.net/2019/07/19/5d31681ac9dbb19061.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL  整理]]></title>
        <id>https://yihangliak.github.io/post/mysql-lian-xi</id>
        <link href="https://yihangliak.github.io/post/mysql-lian-xi">
        </link>
        <updated>2019-06-24T02:11:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="创建表数据">创建表数据</h1>
<h2 id="创建学生表">创建学生表</h2>
<pre><code>CREATE TABLE `student`(
	`s_id` VARCHAR(20),
	`s_name` VARCHAR(20) NOT NULL DEFAULT '',
	`s_birth` VARCHAR(20) NOT NULL DEFAULT '',
	`s_sex` VARCHAR(10) NOT NULL DEFAULT '',
	PRIMARY KEY(`s_id`)
);
</code></pre>
<h2 id="创建课程表">创建课程表</h2>
<pre><code>CREATE TABLE `course`(
	`c_id` VARCHAR(20),
    `c_name` VARCHAR(20) NOT NULL DEFAULT '',
    `t_id` VARCHAR(20) NOT NULL,
    PRIMARY KEY(`c_id`)
);
</code></pre>
<h2 id="创建教师表">创建教师表</h2>
<pre><code>CREATE TABLE `teacher`(
	`t_id` VARCHAR(20),
    `t_name` VARCHAR(20) NOT NULL DEFAULT '',
    PRIMARY KEY(`t_id`)
);
</code></pre>
<h2 id="创建成绩表">创建成绩表</h2>
<pre><code>CREATE TABLE `score`(
	`s_id` VARCHAR(20),
    `c_id` VARCHAR(20),
    `s_score` INT(3),
    PRIMARY KEY(`s_id`, `c_id`)
);
</code></pre>
<h2 id="在学生表中插入数据">在学生表中插入数据</h2>
<pre><code>insert iinto student values('01', '赵雷', '1990-01-01', '男');
insert into student values('02' , '钱电' , '1990-12-21' , '男');
insert into student values('03' , '孙风' , '1990-05-20' , '男');
insert into student values('04' , '李云' , '1990-08-06' , '男');
insert into student values('05' , '周梅' , '1991-12-01' , '女');
insert into student values('06' , '吴兰' , '1992-03-01' , '女');
insert into student values('07' , '郑竹' , '1989-07-01' , '女');
insert into student values('08' , '王菊' , '1990-01-20' , '女');

</code></pre>
<h2 id="在课程表中插入数据">在课程表中插入数据</h2>
<pre><code>insert into course values('01' , '语文' , '02');
insert into course values('02' , '数学' , '01');
insert into course values('03' , '英语' , '03');
</code></pre>
<h2 id="在教师表中插入数据">在教师表中插入数据</h2>
<pre><code>insert into teacher values('01' , '张三');
insert into teacher values('02' , '李四');
insert into teacher values('03' , '王五');
</code></pre>
<h2 id="在成绩表中插入数据">在成绩表中插入数据</h2>
<pre><code>insert into score values('01' , '01' , 80);
insert into score values('01' , '02' , 90);
insert into score values('01' , '03' , 99);
insert into score values('02' , '01' , 70);
insert into score values('02' , '02' , 60);
insert into score values('02' , '03' , 80);
insert into score values('03' , '01' , 80);
insert into score values('03' , '02' , 80);
insert into score values('03' , '03' , 80);
insert into score values('04' , '01' , 50);
insert into score values('04' , '02' , 30);
insert into score values('04' , '03' , 20);
insert into score values('05' , '01' , 76);
insert into score values('05' , '02' , 87);
insert into score values('06' , '01' , 31);
insert into score values('06' , '03' , 34);
insert into score values('07' , '02' , 89);
insert into score values('07' , '03' , 98);
</code></pre>
<h2 id="最终数据结构">最终数据结构</h2>
<p><img src="https://i.loli.net/2019/06/24/5d1047a00429076901.png" alt=""></p>
<h1 id="练习">练习</h1>
<ol>
<li>查询<code>01</code>课程比<code>02</code>课程成绩高的学生的信息及课程分数</li>
</ol>
<pre><code>select a.* ,b.s_score as 01_score,c.s_score as 02_score from student a join score b on a.s_id=b.s_id and b.c_id='01' left join score c on a.s_id=c.s_id and c.c_id='02' or c.c_id = NULL where b.s_score&gt;c.s_score;
</code></pre>
<ol start="2">
<li>查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩</li>
</ol>
<pre><code>select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score 
from student b join score a on b.s_id=a.s_id 
GROUP BY b.s_id,b.s_name HAVING avg_score&gt;=60;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[进入Flask世界！ ]]></title>
        <id>https://yihangliak.github.io/post/flask-chao-qing-dao-wu-fa-xiang-xiang</id>
        <link href="https://yihangliak.github.io/post/flask-chao-qing-dao-wu-fa-xiang-xiang">
        </link>
        <updated>2019-06-21T08:44:53.000Z</updated>
        <content type="html"><![CDATA[<h1 id="flask简介">Flask简介</h1>
<blockquote>
<p>Flask是一个使用<code>Python</code>编写的轻量级web应用框架<br>
WSGI工具箱采用<code>Werzeug</code>，模板引擎使用<code>Jinjia2</code></p>
</blockquote>
<h1 id="进入flask世界">进入Flask世界</h1>
<h2 id="1安装python">1.安装Python</h2>
<p>略</p>
<h2 id="2安装python虚拟环境">2.安装Python虚拟环境</h2>
<p>Python虚拟环境常用命令</p>
<pre><code>安装virtualenv  pip install virtualenv
安装虚拟环境管理工具  virtualenvwrapper-win（Windows系统） 
创建虚拟环境：mkvirtualenv   xxx
切换到某个虚拟环境：workon xxx
退出当前虚拟环境：deactivate xxx
删除某个虚拟环境：rmvirtualenv  xxx
列出所有虚拟环境：lsvirtualenv
进入虚拟环境目录：cdvirtualenv
</code></pre>
<p>在虚拟环境中安装Flask</p>
<pre><code>cmd中：
1.首先切换到已经创建好的虚拟环境
2.输入：pip install flask
</code></pre>
<h1 id="url与视图">URL与视图</h1>
<h2 id="1服务器解释">1.服务器解释</h2>
<p><img src="https://i.loli.net/2019/06/05/5cf698581159673776.png" alt=""></p>
<h2 id="2第一个flask程序">2.第一个Flask程序</h2>
<p>Flask的优势：</p>
<ul>
<li>微型框架，简洁，扩展性强</li>
<li>flask相关依赖非常优秀（jinja2）</li>
<li>开发效率高</li>
<li>社会活跃度高</li>
</ul>
<p>新建一个first_flask_project.py文件</p>
<pre><code class="language-python">from flask import Flask #导入Flask类

from demo import config

app = Flask(__name__)  # 实例化Flask

@app.route('/')   # URL映射到对应视图函数
def hello_world():
    return 'Hello World!'


if __name__=='__main__':
    app.run(debug=True, port=81) # 测试使用的应用服务器


</code></pre>
<p>执行这个py文件</p>
<p><img src="https://i.loli.net/2019/06/05/5cf69949b9fd033530.png" alt=""></p>
<p>浏览器访问hello_world视图函数对应的网址</p>
<p><img src="https://i.loli.net/2019/06/05/5cf6998ce1e2a79941.png" alt=""></p>
<h2 id="3dubug模式">3.DUBUG模式</h2>
<h3 id="31-为什么要开启dubug模式">3.1 为什么要开启DUBUG模式</h3>
<ul>
<li>代码抛出异常后，在浏览器中可以看到错误信息</li>
<li>更新代码以后，只要保存就会使代码自动生效</li>
</ul>
<h3 id="32-开启debug模式的4种方式">3.2 开启DEBUG模式的4种方式</h3>
<p>第一种：在app.run()中传递一个debug=True参数</p>
<pre><code class="language-python">if __name__=='__main__':
    app.run(debug=True, port=81)
</code></pre>
<p>第二种：使用app.debug=True</p>
<pre><code class="language-python">app = Flask(__name__)  
app.debug = True
</code></pre>
<p>第三种：使用update方法，以字典追加的形式将debug参数加到config字典中</p>
<pre><code class="language-python">app = Flask(__name__) 
app.config.update(DEBUG=True)
print(isinstance(app.config, dict))  # 确认config是否是字典
</code></pre>
<p>第四种：加载配置文件的形式</p>
<ul>
<li>
<p>创建一个配置文件，再以模块形式导入</p>
</li>
<li>
<p><img src="https://i.loli.net/2019/06/05/5cf69af23e58681823.png" alt=""></p>
<pre><code class="language-python">from demo import config

app = Flask(__name__)  
app.config.from_object(config)
</code></pre>
</li>
<li>
<p>导入配置文件的形式加载配置</p>
<pre><code class="language-python">from flask import Flask 

app = Flask(__name__)  
app.config.from_pyfile('config.py') # 这样可以少些一行倒模块方法
# 注意要写文件全名（包含文件路径）
# 不仅仅是py文件，其他格式文件也可以
# 这里还有一个silent参数，设为True的话，即使文件不存在也不会报错
</code></pre>
</li>
</ul>
<h2 id="4-url的传参方式">4. URL的传参方式</h2>
<ul>
<li>视图函数上面的装饰器中URL的传参语法为：<code>/&lt;参数名&gt;</code></li>
</ul>
<blockquote>
<p>视图函数中要定义同名参数</p>
</blockquote>
<ul>
<li>
<p>举例，新增一个url_view.py文件，url为文章详情页面</p>
</li>
<li>
<pre><code class="language-python">from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello World'

@app.route('/p/&lt;articel_id&gt;')
def article_detail(articel_id):  # 在视图函数中也要定义同名参数
    return '您请求的文章是：{}'.format(articel_id)

if __name__=='__main__':
    app.run(debug=True, port=81)
</code></pre>
</li>
</ul>
<h2 id="5url参数的数据类型">5.URL参数的数据类型</h2>
<p>1.如果没有指定具体的数据类型,那么就是使用<code>string</code>类型</p>
<p>2.<code>int</code>类型只能传递整数类型</p>
<ul>
<li>
<pre><code>@app.route('/article/&lt;int:test&gt;')
</code></pre>
</li>
</ul>
<p>3.<code>float</code>传递浮点型数据</p>
<p>4.<code>path</code>数据类型和<code>string</code>类型都可以接受任意的字符串,但是path可以接收路径,也就是说可以包含斜杠</p>
<pre><code class="language-python">@app.route('/article/&lt;path:test&gt;')
def page_detail(test):
    return '您请求的页面是:{}'.format(test)
</code></pre>
<p>请求之后的页面：</p>
<p><img src="https://i.loli.net/2019/06/06/5cf8cf06db0f727689.png" alt=""></p>
<p>5.uuid：接受符合<code>uuid</code>规则的字符串，全宇宙唯一，缺点就是太长了，一般用来做表的主键</p>
<p>先导包生成一个uuid</p>
<pre><code class="language-python">import uuid

print(uuid.uuid4())
</code></pre>
<p>在URL对应的视图函数中验证</p>
<pre><code class="language-python">@app.route('/u/&lt;uuid:user_id&gt;')
def user_detail(user_id):
    return '用户的uuid为：%s' %user_id
</code></pre>
<p>效果图</p>
<p><img src="https://i.loli.net/2019/06/06/5cf8d2853c4ba94451.png" alt=""></p>
<p>6.any：多个URL映射到同一个视图函数</p>
<p>代码</p>
<pre><code class="language-python">@app.route('/&lt;any(user,blog):url_path&gt;/&lt;id&gt;/')
def detail(url_path, id):
    if url_path == 'user':
        return '用户id是：%s' %id
    else:
        return '博客详情是：%s' %id
</code></pre>
<p>验证<img src="https://i.loli.net/2019/06/06/5cf8d4b30d41953293.png" alt=""></p>
<h2 id="6接收用户传递的参数">6.接收用户传递的参数</h2>
<p>第一种：使用path形式（将参数嵌入到路径中）（就是上面说的）</p>
<p>第二种：使用查询字符串的方式，就是通过<code>?key=value</code>形式传递</p>
<p>代码：</p>
<pre><code class="language-python">@app.route('/d/')
def d():
    wd = request.args.get('wd')  # 注意到导入request
    return '通过字符串传递的参数是：%s' %wd
</code></pre>
<p>验证</p>
<p><img src="https://i.loli.net/2019/06/06/5cf8dad77772c11673.png" alt=""></p>
<p>如果有多个键值对做为参数时，使用<code>&amp;</code>符号进行分割</p>
<p>实例</p>
<pre><code class="language-python">@app.route('/d/')
def d():
    wd = request.args.get('wd')
    ie = request.args.get('ie')  # 多个参数再写一个请求即可
    return '通过字符串传递的参数是：wd=%s,ie=%s' %(wd,ie)
</code></pre>
<p><img src="https://i.loli.net/2019/06/06/5cf8dbe03246a52713.png" alt=""></p>
<p><mark>如果页面想要做SEO优化，就是被搜索引擎搜索到，那么推荐使用第一种（path）传递方式，如果不在乎SEO，则可以使用第二种</mark></p>
<h2 id="7-url_for">7. url_for</h2>
<p>url_for第一个参数，应该是视图函数的名字的字符串，后面的参数传递给url</p>
<h2 id="8自定义url转换器">8.自定义URL转换器</h2>
<p>1.定义一个类，集成<code>BaseConverter</code></p>
<p>2.在这个类中，重写<code>regex</code>，也就是正则表达式</p>
<p>3.将自定义好的类，映射到<code>app.url_map.converters</code>上</p>
<pre><code class="language-python">from flask import Flask
from werkzeug.routing import BaseConverter

app = Flask(__name__)

# 定义自己的参数转换器，匹配手机号
class TelephoneConverter(BaseConverter):
    regex = r'1[85734]\d{9}'

app.url_map.converters['tel'] = TelephoneConverter # 将自定转换器添加到url_map中（字典方式添加）

@app.route('/')
def hello():
    return 'hello world'

@app.route('/user/&lt;int:user_id&gt;/')   # 自带url转换器
def user_profile(user_id):
    return '您输入的user_id为%s' %user_id

@app.route('/telephone/&lt;tel:user_phone&gt;/')   # 使用自定义url转换器
def user_phone(user_phone):
    return '您的手机号为：%s' %user_phone

if __name__=='__main__':
    app.run(debug=True, port=81)
</code></pre>
<p>to_python的作用：这个方法的返回值，将会传递到view函数中作为参数</p>
<pre><code class="language-python">class ListConverter(BaseConverter):
    def to_python(self, value):
        return value.split('+')
app.url_map.converters['list'] = ListConverter

@app.route('/post/&lt;list:borads&gt;/')
def posts(borads):
    return '您提交的版块是：%s' %borads
</code></pre>
<p>to_url的作用：这个方法的返回值，将会调用url_for函数的时候生成符合要求的url形式</p>
<h2 id="9其他细节知识点">9.其他细节知识点</h2>
<h3 id="91-其他电脑访问">9.1 其他电脑访问</h3>
<p>如果想在同一个局域网下让其他电脑访问本机上的flask网站</p>
<p>要设置<code>host=0.0.0.0</code>才能访问得到</p>
<h3 id="92-指定端口">9.2 指定端口</h3>
<p>设置<code>port=端口号</code></p>
<h3 id="93-url唯一">9.3 URL唯一</h3>
<p>在定义URL时，一定要记得在最后加一个斜杠</p>
<ul>
<li>如果不加斜杠，那么在浏览器中访问这个url时，如果加了斜杠就会访问不到，这样用户体验不好</li>
<li>搜索引擎会将加与不加的视为两个不同的URL，其实两个都是同一个URL，会给搜索引擎造成误解</li>
</ul>
<p>代码里面加了斜杠以后，访问时 加与不加 都可以访问</p>
<h3 id="94-请求方式">9.4 请求方式</h3>
<p>flask中的route方法，默认使用get请求</p>
<p>如果想要自定义请求方式，那么应该传递一个<code>method</code>参数</p>
<pre><code class="language-python">@app.route('/list/', methods=['GET', 'POST'])
def list():
    return 'hi'
</code></pre>
<h2 id="10页面跳转和重定向">10.页面跳转和重定向</h2>
<p>重定向分为永久性重定向和暂时性重定向，在页面上体现的操作就是浏览器会从一个页面自动跳转到另外一个页面</p>
<p>比如用户访问了一个需要权限的页面，但是该用户当前并没有登录，因此我们应该给他重定向到登录页面</p>
<ul>
<li>永久性重定向：<code>http</code>的状态码是<code>301</code>，多用于旧网址被废弃了要转到一个新的网址确保用户的访问</li>
<li>暂时性重定向，<code>http</code>的状态码是<code>302</code>，表示页面的暂时性跳转。比如一个需要权限的网址，如果当前用户没有登录，应该重定向登录页面，这种情况下，应该暂时性重定向</li>
</ul>
<p>在flask中，重定向是通过<code>flask.redirect(location, code=302)</code>这个函数来实现的，<code>location</code>表示需要重定向到的URL，应该配合之前的<code>url_for</code>函数来使用，<code>code</code>表示采用哪个重定向，默认是<code>302</code>，即<code>暂时性重定向</code>，也可以修改成<code>301</code>来实现永久性重定向</p>
<p>代码案例：</p>
<pre><code class="language-python">from flask import Flask, request, url_for
from werkzeug.utils import redirect

app = Flask(__name__)

@app.route('/')
def hello():
    return 'hello world'

@app.route('/login/')
def login():
    return '这是登录页面'

@app.route('/profile/')   # 个人中心视图函数
def profile():
    if request.args.get('name'):  # 使用request检查url中是否有name参数
        return '个人中心页面'
    else:
        return redirect(url_for('login'))  # 使用redirect+url_for重定向url，注意，可以定义code参数，默认302即暂时性重定向

if __name__=='__main__':
    app.run(debug=True, port=81)
</code></pre>
<p>访问profile在没有加name参数的情况下会自动暂时性重定向到登录页面</p>
<p><img src="https://i.loli.net/2019/06/11/5cff5e9c07a6469200.gif" alt=""></p>
<p>访问profile加了name参数以后，正常访问到个人中心页面</p>
<p><img src="https://i.loli.net/2019/06/11/5cff5f0d7c57687406.png" alt=""></p>
<h2 id="11关于响应response">11.关于响应（Response）</h2>
<p>视图函数的返回值会被自动转换为一个响应对象，flask的转换逻辑如下：</p>
<ul>
<li>如果返回的是一个合法的响应对象，则直接返回</li>
<li>如果返回的是一个字符串，那么flask会重新创建一个<code>werkzeug.wrappers.Response</code>对象，<code>Response</code>对象将该字符串作为主体，状态码为<code>200</code>，<code>MIME</code>类型为<code>text/html</code>，然后返回该<code>Response</code>对象</li>
<li>如果返回的是一个元祖，元祖中的数据类型是（response,status,headers）。status值会覆盖默认的200状态码，headers可以是一个列表或者字典，作为额外的消息头</li>
<li>如果以上条件都不满足，flask会假设返回值是一个合法的<code>WSGI</code>应用程序，并通过<code>Response.force_type(rv,request,environ)</code>转换为一个请求对象</li>
</ul>
<blockquote>
<p>第一个例子，直接使用<code>Response</code>创建：</p>
</blockquote>
<pre><code class="language-python">from flask import Flask, Response

@app.route('/about/')
def about():
    resp = Response(response='about page', status=200, content_type='text/html;charset=utf-8')
    return resp
</code></pre>
<blockquote>
<p>第二个例子，使用<code>字符串</code>创建：</p>
</blockquote>
<pre><code class="language-python">@app.route('/')
def hello():
    return 'hello world' # 直接返回字符串，flask也会自动组装成一个Response对象返回
</code></pre>
<blockquote>
<p>第三个例子，使用<code>元祖</code>创建：</p>
</blockquote>
<pre><code class="language-python">@app.route('/about2/')
def about2():
    return 'about2',200,{'X-NAME':'Alex'}
</code></pre>
<p><img src="https://i.loli.net/2019/06/12/5d00680c5542521648.png" alt=""></p>
<blockquote>
<p>第四个例子，<code>自定义响应</code>，自定义响应必须满足三个条件：</p>
</blockquote>
<ul>
<li>必须继承自<code>Respone</code>类</li>
<li>实现类方法<code>force_type(cls,rv,nviron=None)</code></li>
<li>必须指定<code>app.respone_class</code>为你自定义的<code>Respone</code></li>
</ul>
<p><code>Restful API</code>都是通过<code>json</code>的形式进行传递，如果你的后台跟前台进行交互，所有的<code>URL</code>参数都是发送<code>json</code>数据，那么此时，可以定义一个叫做<code>JSONResponse</code>的类来代替<code>Response</code>类</p>
<pre><code class="language-python">from flask import Flask, Response, jsonify

# 将视图函数中返回的字典，转换成json对象，然后返回
class JSONResponse(Response):
    @classmethod
    def force_type(cls, response, environ=None):
        if isinstance(response, dict):
            response = jsonify(response)
        return super(JSONResponse, cls).force_type(response,environ)

app.response_class = JSONResponse

@app.route('/json/')
def json_response():
    return {'username':'alex'}
</code></pre>
<p><img src="https://i.loli.net/2019/06/12/5d0099fd2a97e99449.png" alt=""></p>
<h1 id="jinja2模板">Jinja2模板</h1>
<h2 id="1模板基础">1.模板基础</h2>
<p>在渲染模板的时候，默认会从项目根目录下的<code>templates</code>目录下查找模板</p>
<p>如果不想把模板文件放在<code>templates</code>目录下，那么可以在<code>Flask</code>初始化的时候给<code>template_folder</code>参数传值，来指定模板的路径</p>
<blockquote>
<p>在默认模板目录下查找模板</p>
</blockquote>
<pre><code class="language-python">from flask import Flask, render_template

@app.route('/')
def hello():
    return render_template('index.html')  # 在templates目录下查找模板
</code></pre>
<h2 id="2模板参数">2.模板参数</h2>
<p>在使用<code>render_template</code>渲染模板的时候，可以传递关键字参数，以后直接在模板中使用就可以了</p>
<p>如果参数过多，那么可以将所有的参数放到一个字典中，然后在传这个字典参数的时候，使用两个星号，将字典中的数据组成关键字参数传递</p>
<blockquote>
<p>举例</p>
</blockquote>
<p>视图函数中渲染模板传递参数：</p>
<pre><code class="language-python">@app.route('/')
def hello():
    context = {
        'username':'alex',
        'tel':17688165555
    }
    return render_template('index.html',**context)
</code></pre>
<p><code>HTML</code>中调用<code>视图函数</code>中的参数</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;alex&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;这是模板渲染的数据&lt;/h1&gt;
    &lt;p&gt;{{username}}&lt;/p&gt;  &lt;!-- 调用视图函数中的参数 --&gt;
    &lt;p&gt;{{tel}}&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h2 id="3模板中的url_for">3.模板中的url_for</h2>
<p>模板中的<code>url_for</code>与后台视图函数中的使用基本是一致的</p>
<p>也是传递视图函数的名字，也可以传递参数</p>
<blockquote>
<p>注意：在模板中使用url_for需要在左右两边加上一对花括号，{{ url_for() }}</p>
</blockquote>
<p>举例：</p>
<p>在首页模板中添加一个<code>登录</code>链接</p>
<blockquote>
<p>在这个首页模板中使用<code>url_for</code>来与login视图函数对应</p>
<p>这个的好处就是，一旦视图函数的url变化，模板中使用url的地方会相应变化</p>
</blockquote>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;首页&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;p&gt; &lt;a href=&quot;{{ url_for('login')}}&quot;&gt;登录&lt;/a&gt; &lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>然后新建一个<code>login</code>模板</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;alex&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;这是登录页面&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>新建一个<code>login</code>视图函数</p>
<pre><code class="language-python">from flask import Flask, render_template, url_for

app = Flask(__name__)


@app.route('/')
def hello():
    context = {
        'username':'alex',
        'tel':17688165555
    }
    return render_template('index.html',**context)

@app.route('/login/')
def login():
    # url_for('login')
    return render_template('login.html')

if __name__ == '__main__':
    app.run(debug=True, port=81)

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Selenium 从入门到实战]]></title>
        <id>https://yihangliak.github.io/post/selenium-cong-ru-men-dao-shi-zhan</id>
        <link href="https://yihangliak.github.io/post/selenium-cong-ru-men-dao-shi-zhan">
        </link>
        <updated>2019-06-21T03:29:54.000Z</updated>
        <content type="html"><![CDATA[<p>即将上线</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 踩坑之路]]></title>
        <id>https://yihangliak.github.io/post/python-mo-fa</id>
        <link href="https://yihangliak.github.io/post/python-mo-fa">
        </link>
        <updated>2019-06-20T15:35:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="python简介">Python简介</h1>
<h2 id="1python起源">1.Python起源</h2>
<ul>
<li>Python是<code>吉多*范罗苏姆</code>在1989年圣诞节，为了打发无聊而编写的一个解释程序</li>
<li>python的意思：蟒蛇
<ul>
<li>BBC电视剧《飞行的马戏团》</li>
</ul>
</li>
<li>解释型编程语言，无需编译
<ul>
<li>先翻译成中间代码，再解释给机器运行</li>
</ul>
</li>
<li>一般情况下，同样的功能，python的代码量是java的1/5
<ul>
<li>名言：life is short，you need python（人生苦短，我用python）</li>
</ul>
</li>
<li>现有版本
<ul>
<li>python2.X（过去的版本），发布于2001年</li>
<li>python3.X（现在和未来主流版本，3.0发布于2008年）</li>
</ul>
</li>
</ul>
<h2 id="2-python的应用">2. Python的应用</h2>
<ul>
<li><strong>云计算</strong>：云计算最火语言</li>
</ul>
<blockquote>
<p>OpenStack公司，开源云计算平台就是基于python开发的</p>
</blockquote>
<ul>
<li><strong>web开发</strong>
<ul>
<li>代表：YouTube，豆瓣，知乎</li>
<li>典型框架：Django，flask</li>
</ul>
</li>
<li><strong>人工智能</strong></li>
</ul>
<blockquote>
<p>python是机器学习，神经网络，深度学习等方面主流的编程语言</p>
</blockquote>
<ul>
<li><strong>自动化运维</strong></li>
</ul>
<h2 id="3-python的优点">3. Python的优点</h2>
<ul>
<li>易学</li>
<li>免费，开源</li>
<li>可移植性强
<ul>
<li>几乎所有的操作系统都支持：Windows，macOS，Linux等</li>
</ul>
</li>
<li>丰富的模块</li>
</ul>
<h1 id="输出与输入">输出与输入</h1>
<h2 id="1输出">1.输出</h2>
<p>使用print函数在控制台输出指定内容</p>
<h3 id="11-输出字符串和数字">1.1 输出字符串和数字</h3>
<pre><code># 输出字符串
print('Helloworld')

# 输出数字
print(123)
</code></pre>
<h3 id="12-输出多个内容">1.2 输出多个内容</h3>
<p>需要同时输出多个内容时，使用逗号隔开</p>
<pre><code>print('Helloworld',123)
</code></pre>
<h3 id="13-输出不换行">1.3 输出不换行</h3>
<p>print输出时默认是换行的，如果不想换行需要传入end参数</p>
<pre><code>print('Helloworld',end='')
</code></pre>
<h2 id="2输入">2.输入</h2>
<p>python3中使用input函数从键盘获取数据，返回string类型</p>
<blockquote>
<p>注意：在python3中，input将所有输入的数据都保存为字符串类型</p>
</blockquote>
<pre><code class="language-python">username = input('请输入您的用户名：')
</code></pre>
<blockquote>
<p>使用input输入数据，如果需要保持原类型，比如输入数字保存为原数字类型，需要进行转型操作</p>
</blockquote>
<pre><code class="language-python"># 在input前加int（）将输入数据转成整数类型
username = int(input('请输入您的用户名：'))
</code></pre>
<blockquote>
<p>2019-06-21     更新Python简介章节</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SVN版本控制系统使用技巧]]></title>
        <id>https://yihangliak.github.io/post/RjvYDSerC</id>
        <link href="https://yihangliak.github.io/post/RjvYDSerC">
        </link>
        <updated>2019-06-20T15:22:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="svn简介">SVN简介</h1>
<p><code>Subversion</code>是一个开源的版本控制系统</p>
<ul>
<li>所有数据存放在一个中央资料档案库中</li>
<li>可以记住每一次文件的变动</li>
<li>可以恢复到旧版本档案</li>
<li>可以浏览文件的变动历史</li>
</ul>
]]></content>
    </entry>
</feed>